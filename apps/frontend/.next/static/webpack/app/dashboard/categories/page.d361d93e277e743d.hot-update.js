"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/categories/page",{

/***/ "(app-pages-browser)/./src/context/guild-context.tsx":
/*!***************************************!*\
  !*** ./src/context/guild-context.tsx ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GuildProvider: () => (/* binding */ GuildProvider),\n/* harmony export */   useGuild: () => (/* binding */ useGuild)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.3.0_@babel+core@7.2_be93e11acbbedc130c6eb3d215a0d5e8/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.3.0_@babel+core@7.2_be93e11acbbedc130c6eb3d215a0d5e8/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _auth_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./auth-context */ \"(app-pages-browser)/./src/context/auth-context.tsx\");\n/* __next_internal_client_entry_do_not_use__ useGuild,GuildProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nconst defaultContext = {\n    availableGuilds: [],\n    currentGuild: null,\n    setCurrentGuild: ()=>{},\n    loading: true\n};\nconst GuildContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(defaultContext);\nconst useGuild = ()=>{\n    _s();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(GuildContext);\n};\n_s(useGuild, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction GuildProvider(param) {\n    let { children } = param;\n    _s1();\n    // availableGuilds und loading kommen stabil aus AuthContext\n    const { availableGuilds, loading: authLoading, isAuthenticated } = (0,_auth_context__WEBPACK_IMPORTED_MODULE_2__.useAuth)();\n    const [selectedGuild, setSelectedGuild] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Initialisierung / Wiederherstellung der Auswahl\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"GuildProvider.useEffect\": ()=>{\n            console.log('[GuildContext Effect] Running Init/Restore Effect. AuthLoading:', authLoading, 'IsAuth:', isAuthenticated);\n            if (!authLoading && isAuthenticated) {\n                const guildsToUse = availableGuilds || [];\n                console.log('[GuildContext Effect] Guilds available:', guildsToUse.length);\n                if (guildsToUse.length === 0) {\n                    if (selectedGuild !== null) {\n                        console.log('[GuildContext Effect] No guilds available, resetting selection.');\n                        setSelectedGuild(null);\n                        localStorage.removeItem('selectedGuildId');\n                    }\n                    return;\n                }\n                const storedGuildId = localStorage.getItem('selectedGuildId');\n                let guildToSelect = null;\n                if (storedGuildId) {\n                    var _guildsToUse_find;\n                    guildToSelect = (_guildsToUse_find = guildsToUse.find({\n                        \"GuildProvider.useEffect\": (g)=>g.id === storedGuildId\n                    }[\"GuildProvider.useEffect\"])) !== null && _guildsToUse_find !== void 0 ? _guildsToUse_find : null;\n                    if (!guildToSelect) {\n                        console.warn(\"[GuildContext Effect] Stored guildId \".concat(storedGuildId, \" not found in available guilds.\"));\n                        localStorage.removeItem('selectedGuildId');\n                    }\n                }\n                // Wenn keine gültige gespeicherte Guild, nimm die erste\n                if (!guildToSelect && guildsToUse.length > 0) {\n                    guildToSelect = guildsToUse[0];\n                    console.log('[GuildContext Effect] Selecting first available guild:', guildToSelect.name);\n                    localStorage.setItem('selectedGuildId', guildToSelect.id); // Speichere die erste, wenn keine gespeichert war\n                }\n                // Nur updaten, wenn sich die Auswahl ändert\n                if ((selectedGuild === null || selectedGuild === void 0 ? void 0 : selectedGuild.id) !== (guildToSelect === null || guildToSelect === void 0 ? void 0 : guildToSelect.id)) {\n                    var _guildToSelect_name;\n                    console.log(\"[GuildContext Effect] Setting selected guild to: \".concat((_guildToSelect_name = guildToSelect === null || guildToSelect === void 0 ? void 0 : guildToSelect.name) !== null && _guildToSelect_name !== void 0 ? _guildToSelect_name : 'null'));\n                    setSelectedGuild(guildToSelect);\n                }\n            } else if (!authLoading && !isAuthenticated) {\n                // Wenn nicht mehr authentifiziert, Auswahl sicher zurücksetzen\n                if (selectedGuild !== null) {\n                    console.log('[GuildContext Effect] Not authenticated, resetting selection.');\n                    setSelectedGuild(null);\n                    localStorage.removeItem('selectedGuildId');\n                }\n            }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }\n    }[\"GuildProvider.useEffect\"], [\n        authLoading,\n        isAuthenticated,\n        availableGuilds\n    ]); // Abhängig von Auth-Status und verfügbaren Guilds\n    // Funktion zum Setzen der Guild - stabil dank useCallback & stabiler Abhängigkeiten\n    const setCurrentGuildMemoized = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"GuildProvider.useCallback[setCurrentGuildMemoized]\": (guildId)=>{\n            console.log(\"[GuildContext] setCurrentGuild called with ID: \".concat(guildId));\n            const foundGuild = guildId ? availableGuilds.find({\n                \"GuildProvider.useCallback[setCurrentGuildMemoized]\": (g)=>g.id === guildId\n            }[\"GuildProvider.useCallback[setCurrentGuildMemoized]\"]) : null;\n            if (guildId && !foundGuild) {\n                console.error(\"[GuildContext] Attempted to set non-available guild: \".concat(guildId));\n                console.log('[GuildContext] Available guilds for check:', availableGuilds);\n                // Optional: Fehler anzeigen oder zur ersten Guild wechseln?\n                return; // Verhindere das Setzen einer ungültigen Guild\n            }\n            // Nur updaten, wenn sich die ID ändert\n            if ((selectedGuild === null || selectedGuild === void 0 ? void 0 : selectedGuild.id) !== (foundGuild === null || foundGuild === void 0 ? void 0 : foundGuild.id)) {\n                setSelectedGuild(foundGuild !== null && foundGuild !== void 0 ? foundGuild : null);\n                if (foundGuild) {\n                    localStorage.setItem('selectedGuildId', foundGuild.id);\n                    console.log(\"[GuildContext] Guild set to: \".concat(foundGuild.name));\n                } else {\n                    localStorage.removeItem('selectedGuildId');\n                    console.log('[GuildContext] Guild selection cleared.');\n                }\n            } else {\n                console.log(\"[GuildContext] Guild \".concat(guildId, \" is already selected.\"));\n            }\n        }\n    }[\"GuildProvider.useCallback[setCurrentGuildMemoized]\"], [\n        availableGuilds,\n        selectedGuild === null || selectedGuild === void 0 ? void 0 : selectedGuild.id\n    ]); // Hängt von verfügbaren Guilds und der aktuellen ID ab\n    // Kontextwert - stabil dank useMemo und stabilen Abhängigkeiten\n    const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"GuildProvider.useMemo[contextValue]\": ()=>{\n            console.log('[GuildContext] Recalculating context value.');\n            return {\n                currentGuild: selectedGuild,\n                availableGuilds: availableGuilds || [],\n                setCurrentGuild: setCurrentGuildMemoized,\n                loading: authLoading\n            };\n        }\n    }[\"GuildProvider.useMemo[contextValue]\"], [\n        selectedGuild,\n        availableGuilds,\n        setCurrentGuildMemoized,\n        authLoading\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(GuildContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\info\\\\Documents\\\\Discord Bot\\\\Chimera\\\\apps\\\\frontend\\\\src\\\\context\\\\guild-context.tsx\",\n        lineNumber: 120,\n        columnNumber: 5\n    }, this);\n}\n_s1(GuildProvider, \"/F24X5z12bkHOrXSfHeWCCfZ5tM=\", false, function() {\n    return [\n        _auth_context__WEBPACK_IMPORTED_MODULE_2__.useAuth\n    ];\n});\n_c = GuildProvider;\nvar _c;\n$RefreshReg$(_c, \"GuildProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb250ZXh0L2d1aWxkLWNvbnRleHQudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBRW9HO0FBRTNEO0FBU3pDLE1BQU1RLGlCQUFtQztJQUN2Q0MsaUJBQWlCLEVBQUU7SUFDbkJDLGNBQWM7SUFDZEMsaUJBQWlCLEtBQU87SUFDeEJDLFNBQVM7QUFDWDtBQUVBLE1BQU1DLDZCQUFlWixvREFBYUEsQ0FBbUJPO0FBRTlDLE1BQU1NLFdBQVc7O0lBQU1aLE9BQUFBLGlEQUFVQSxDQUFDVztBQUFZLEVBQUU7R0FBMUNDO0FBRU4sU0FBU0MsY0FBYyxLQUEyQztRQUEzQyxFQUFFQyxRQUFRLEVBQWlDLEdBQTNDOztJQUM1Qiw0REFBNEQ7SUFDNUQsTUFBTSxFQUFFUCxlQUFlLEVBQUVHLFNBQVNLLFdBQVcsRUFBRUMsZUFBZSxFQUFFLEdBQUdYLHNEQUFPQTtJQUMxRSxNQUFNLENBQUNZLGVBQWVDLGlCQUFpQixHQUFHakIsK0NBQVFBLENBQStCO0lBRWpGLGtEQUFrRDtJQUNsREMsZ0RBQVNBO21DQUFDO1lBQ1JpQixRQUFRQyxHQUFHLENBQUMsbUVBQW1FTCxhQUFhLFdBQVdDO1lBQ3ZHLElBQUksQ0FBQ0QsZUFBZUMsaUJBQWlCO2dCQUNuQyxNQUFNSyxjQUFjZCxtQkFBbUIsRUFBRTtnQkFDekNZLFFBQVFDLEdBQUcsQ0FBQywyQ0FBMkNDLFlBQVlDLE1BQU07Z0JBRXpFLElBQUlELFlBQVlDLE1BQU0sS0FBSyxHQUFHO29CQUM1QixJQUFJTCxrQkFBa0IsTUFBTTt3QkFDeEJFLFFBQVFDLEdBQUcsQ0FBQzt3QkFDWkYsaUJBQWlCO3dCQUNqQkssYUFBYUMsVUFBVSxDQUFDO29CQUM1QjtvQkFDQTtnQkFDRjtnQkFFQSxNQUFNQyxnQkFBZ0JGLGFBQWFHLE9BQU8sQ0FBQztnQkFDM0MsSUFBSUMsZ0JBQThDO2dCQUVsRCxJQUFJRixlQUFlO3dCQUNESjtvQkFBaEJNLGdCQUFnQk4sQ0FBQUEsb0JBQUFBLFlB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QW5HZ0JEOztRQUVxRFIsa0RBQU9BOzs7S0FGNURRIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGluZm9cXERvY3VtZW50c1xcRGlzY29yZCBCb3RcXENoaW1lcmFcXGFwcHNcXGZyb250ZW5kXFxzcmNcXGNvbnRleHRcXGd1aWxkLWNvbnRleHQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcblxuaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgR3VpbGRTZWxlY3Rpb25JbmZvRHRvIH0gZnJvbSAnc2hhcmVkLXR5cGVzJztcbmltcG9ydCB7IHVzZUF1dGggfSBmcm9tICcuL2F1dGgtY29udGV4dCc7XG5cbmludGVyZmFjZSBHdWlsZENvbnRleHRUeXBlIHtcbiAgYXZhaWxhYmxlR3VpbGRzOiBHdWlsZFNlbGVjdGlvbkluZm9EdG9bXTsgLy8gS29tbXQgamV0enQgc3RhYmlsIGF1cyBBdXRoQ29udGV4dFxuICBjdXJyZW50R3VpbGQ6IEd1aWxkU2VsZWN0aW9uSW5mb0R0byB8IG51bGw7XG4gIHNldEN1cnJlbnRHdWlsZDogKGd1aWxkSWQ6IHN0cmluZyB8IG51bGwpID0+IHZvaWQ7IC8vIElzdCBqZXR6dCBzdGFiaWxcbiAgbG9hZGluZzogYm9vbGVhbjsgLy8gS29tbXQgYXVzIEF1dGhDb250ZXh0XG59XG5cbmNvbnN0IGRlZmF1bHRDb250ZXh0OiBHdWlsZENvbnRleHRUeXBlID0ge1xuICBhdmFpbGFibGVHdWlsZHM6IFtdLFxuICBjdXJyZW50R3VpbGQ6IG51bGwsXG4gIHNldEN1cnJlbnRHdWlsZDogKCkgPT4ge30sXG4gIGxvYWRpbmc6IHRydWUsXG59O1xuXG5jb25zdCBHdWlsZENvbnRleHQgPSBjcmVhdGVDb250ZXh0PEd1aWxkQ29udGV4dFR5cGU+KGRlZmF1bHRDb250ZXh0KTtcblxuZXhwb3J0IGNvbnN0IHVzZUd1aWxkID0gKCkgPT4gdXNlQ29udGV4dChHdWlsZENvbnRleHQpO1xuXG5leHBvcnQgZnVuY3Rpb24gR3VpbGRQcm92aWRlcih7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSB7XG4gIC8vIGF2YWlsYWJsZUd1aWxkcyB1bmQgbG9hZGluZyBrb21tZW4gc3RhYmlsIGF1cyBBdXRoQ29udGV4dFxuICBjb25zdCB7IGF2YWlsYWJsZUd1aWxkcywgbG9hZGluZzogYXV0aExvYWRpbmcsIGlzQXV0aGVudGljYXRlZCB9ID0gdXNlQXV0aCgpO1xuICBjb25zdCBbc2VsZWN0ZWRHdWlsZCwgc2V0U2VsZWN0ZWRHdWlsZF0gPSB1c2VTdGF0ZTxHdWlsZFNlbGVjdGlvbkluZm9EdG8gfCBudWxsPihudWxsKTtcblxuICAvLyBJbml0aWFsaXNpZXJ1bmcgLyBXaWVkZXJoZXJzdGVsbHVuZyBkZXIgQXVzd2FobFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdbR3VpbGRDb250ZXh0IEVmZmVjdF0gUnVubmluZyBJbml0L1Jlc3RvcmUgRWZmZWN0LiBBdXRoTG9hZGluZzonLCBhdXRoTG9hZGluZywgJ0lzQXV0aDonLCBpc0F1dGhlbnRpY2F0ZWQpO1xuICAgIGlmICghYXV0aExvYWRpbmcgJiYgaXNBdXRoZW50aWNhdGVkKSB7XG4gICAgICBjb25zdCBndWlsZHNUb1VzZSA9IGF2YWlsYWJsZUd1aWxkcyB8fCBbXTtcbiAgICAgIGNvbnNvbGUubG9nKCdbR3VpbGRDb250ZXh0IEVmZmVjdF0gR3VpbGRzIGF2YWlsYWJsZTonLCBndWlsZHNUb1VzZS5sZW5ndGgpO1xuXG4gICAgICBpZiAoZ3VpbGRzVG9Vc2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGlmIChzZWxlY3RlZEd1aWxkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW0d1aWxkQ29udGV4dCBFZmZlY3RdIE5vIGd1aWxkcyBhdmFpbGFibGUsIHJlc2V0dGluZyBzZWxlY3Rpb24uJyk7XG4gICAgICAgICAgICBzZXRTZWxlY3RlZEd1aWxkKG51bGwpO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3NlbGVjdGVkR3VpbGRJZCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc3RvcmVkR3VpbGRJZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzZWxlY3RlZEd1aWxkSWQnKTtcbiAgICAgIGxldCBndWlsZFRvU2VsZWN0OiBHdWlsZFNlbGVjdGlvbkluZm9EdG8gfCBudWxsID0gbnVsbDtcblxuICAgICAgaWYgKHN0b3JlZEd1aWxkSWQpIHtcbiAgICAgICAgZ3VpbGRUb1NlbGVjdCA9IGd1aWxkc1RvVXNlLmZpbmQoZyA9PiBnLmlkID09PSBzdG9yZWRHdWlsZElkKSA/PyBudWxsO1xuICAgICAgICBpZiAoIWd1aWxkVG9TZWxlY3QpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYFtHdWlsZENvbnRleHQgRWZmZWN0XSBTdG9yZWQgZ3VpbGRJZCAke3N0b3JlZEd1aWxkSWR9IG5vdCBmb3VuZCBpbiBhdmFpbGFibGUgZ3VpbGRzLmApO1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdzZWxlY3RlZEd1aWxkSWQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBXZW5uIGtlaW5lIGfDvGx0aWdlIGdlc3BlaWNoZXJ0ZSBHdWlsZCwgbmltbSBkaWUgZXJzdGVcbiAgICAgIGlmICghZ3VpbGRUb1NlbGVjdCAmJiBndWlsZHNUb1VzZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGd1aWxkVG9TZWxlY3QgPSBndWlsZHNUb1VzZVswXTtcbiAgICAgICAgY29uc29sZS5sb2coJ1tHdWlsZENvbnRleHQgRWZmZWN0XSBTZWxlY3RpbmcgZmlyc3QgYXZhaWxhYmxlIGd1aWxkOicsIGd1aWxkVG9TZWxlY3QubmFtZSk7XG4gICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc2VsZWN0ZWRHdWlsZElkJywgZ3VpbGRUb1NlbGVjdC5pZCk7IC8vIFNwZWljaGVyZSBkaWUgZXJzdGUsIHdlbm4ga2VpbmUgZ2VzcGVpY2hlcnQgd2FyXG4gICAgICB9XG5cbiAgICAgIC8vIE51ciB1cGRhdGVuLCB3ZW5uIHNpY2ggZGllIEF1c3dhaGwgw6RuZGVydFxuICAgICAgaWYgKHNlbGVjdGVkR3VpbGQ/LmlkICE9PSBndWlsZFRvU2VsZWN0Py5pZCkge1xuICAgICAgICBjb25zb2xlLmxvZyhgW0d1aWxkQ29udGV4dCBFZmZlY3RdIFNldHRpbmcgc2VsZWN0ZWQgZ3VpbGQgdG86ICR7Z3VpbGRUb1NlbGVjdD8ubmFtZSA/PyAnbnVsbCd9YCk7XG4gICAgICAgIHNldFNlbGVjdGVkR3VpbGQoZ3VpbGRUb1NlbGVjdCk7XG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKCFhdXRoTG9hZGluZyAmJiAhaXNBdXRoZW50aWNhdGVkKSB7XG4gICAgICAvLyBXZW5uIG5pY2h0IG1laHIgYXV0aGVudGlmaXppZXJ0LCBBdXN3YWhsIHNpY2hlciB6dXLDvGNrc2V0emVuXG4gICAgICBpZiAoc2VsZWN0ZWRHdWlsZCAhPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdbR3VpbGRDb250ZXh0IEVmZmVjdF0gTm90IGF1dGhlbnRpY2F0ZWQsIHJlc2V0dGluZyBzZWxlY3Rpb24uJyk7XG4gICAgICAgICAgc2V0U2VsZWN0ZWRHdWlsZChudWxsKTtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnc2VsZWN0ZWRHdWlsZElkJyk7XG4gICAgICB9XG4gICAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFthdXRoTG9hZGluZywgaXNBdXRoZW50aWNhdGVkLCBhdmFpbGFibGVHdWlsZHNdKTsgLy8gQWJow6RuZ2lnIHZvbiBBdXRoLVN0YXR1cyB1bmQgdmVyZsO8Z2JhcmVuIEd1aWxkc1xuXG4gIC8vIEZ1bmt0aW9uIHp1bSBTZXR6ZW4gZGVyIEd1aWxkIC0gc3RhYmlsIGRhbmsgdXNlQ2FsbGJhY2sgJiBzdGFiaWxlciBBYmjDpG5naWdrZWl0ZW5cbiAgY29uc3Qgc2V0Q3VycmVudEd1aWxkTWVtb2l6ZWQgPSB1c2VDYWxsYmFjaygoZ3VpbGRJZDogc3RyaW5nIHwgbnVsbCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKGBbR3VpbGRDb250ZXh0XSBzZXRDdXJyZW50R3VpbGQgY2FsbGVkIHdpdGggSUQ6ICR7Z3VpbGRJZH1gKTtcbiAgICBjb25zdCBmb3VuZEd1aWxkID0gZ3VpbGRJZCA/IGF2YWlsYWJsZUd1aWxkcy5maW5kKGcgPT4gZy5pZCA9PT0gZ3VpbGRJZCkgOiBudWxsO1xuXG4gICAgaWYgKGd1aWxkSWQgJiYgIWZvdW5kR3VpbGQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFtHdWlsZENvbnRleHRdIEF0dGVtcHRlZCB0byBzZXQgbm9uLWF2YWlsYWJsZSBndWlsZDogJHtndWlsZElkfWApO1xuICAgICAgY29uc29sZS5sb2coJ1tHdWlsZENvbnRleHRdIEF2YWlsYWJsZSBndWlsZHMgZm9yIGNoZWNrOicsIGF2YWlsYWJsZUd1aWxkcyk7XG4gICAgICAvLyBPcHRpb25hbDogRmVobGVyIGFuemVpZ2VuIG9kZXIgenVyIGVyc3RlbiBHdWlsZCB3ZWNoc2Vsbj9cbiAgICAgIHJldHVybjsgLy8gVmVyaGluZGVyZSBkYXMgU2V0emVuIGVpbmVyIHVuZ8O8bHRpZ2VuIEd1aWxkXG4gICAgfVxuXG4gICAgLy8gTnVyIHVwZGF0ZW4sIHdlbm4gc2ljaCBkaWUgSUQgw6RuZGVydFxuICAgIGlmIChzZWxlY3RlZEd1aWxkPy5pZCAhPT0gZm91bmRHdWlsZD8uaWQpIHtcbiAgICAgICAgc2V0U2VsZWN0ZWRHdWlsZChmb3VuZEd1aWxkID8/IG51bGwpO1xuICAgICAgICBpZiAoZm91bmRHdWlsZCkge1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzZWxlY3RlZEd1aWxkSWQnLCBmb3VuZEd1aWxkLmlkKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgW0d1aWxkQ29udGV4dF0gR3VpbGQgc2V0IHRvOiAke2ZvdW5kR3VpbGQubmFtZX1gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnc2VsZWN0ZWRHdWlsZElkJyk7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1tHdWlsZENvbnRleHRdIEd1aWxkIHNlbGVjdGlvbiBjbGVhcmVkLicpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coYFtHdWlsZENvbnRleHRdIEd1aWxkICR7Z3VpbGRJZH0gaXMgYWxyZWFkeSBzZWxlY3RlZC5gKTtcbiAgICB9XG4gIH0sIFthdmFpbGFibGVHdWlsZHMsIHNlbGVjdGVkR3VpbGQ/LmlkXSk7IC8vIEjDpG5ndCB2b24gdmVyZsO8Z2JhcmVuIEd1aWxkcyB1bmQgZGVyIGFrdHVlbGxlbiBJRCBhYlxuXG4gIC8vIEtvbnRleHR3ZXJ0IC0gc3RhYmlsIGRhbmsgdXNlTWVtbyB1bmQgc3RhYmlsZW4gQWJow6RuZ2lna2VpdGVuXG4gIGNvbnN0IGNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdbR3VpbGRDb250ZXh0XSBSZWNhbGN1bGF0aW5nIGNvbnRleHQgdmFsdWUuJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnJlbnRHdWlsZDogc2VsZWN0ZWRHdWlsZCxcbiAgICAgIGF2YWlsYWJsZUd1aWxkczogYXZhaWxhYmxlR3VpbGRzIHx8IFtdLFxuICAgICAgc2V0Q3VycmVudEd1aWxkOiBzZXRDdXJyZW50R3VpbGRNZW1vaXplZCxcbiAgICAgIGxvYWRpbmc6IGF1dGhMb2FkaW5nLFxuICAgIH07XG4gIH0sIFtzZWxlY3RlZEd1aWxkLCBhdmFpbGFibGVHdWlsZHMsIHNldEN1cnJlbnRHdWlsZE1lbW9pemVkLCBhdXRoTG9hZGluZ10pO1xuXG4gIHJldHVybiAoXG4gICAgPEd1aWxkQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17Y29udGV4dFZhbHVlfT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0d1aWxkQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn0iXSwibmFtZXMiOlsiUmVhY3QiLCJjcmVhdGVDb250ZXh0IiwidXNlQ29udGV4dCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidXNlTWVtbyIsInVzZUNhbGxiYWNrIiwidXNlQXV0aCIsImRlZmF1bHRDb250ZXh0IiwiYXZhaWxhYmxlR3VpbGRzIiwiY3VycmVudEd1aWxkIiwic2V0Q3VycmVudEd1aWxkIiwibG9hZGluZyIsIkd1aWxkQ29udGV4dCIsInVzZUd1aWxkIiwiR3VpbGRQcm92aWRlciIsImNoaWxkcmVuIiwiYXV0aExvYWRpbmciLCJpc0F1dGhlbnRpY2F0ZWQiLCJzZWxlY3RlZEd1aWxkIiwic2V0U2VsZWN0ZWRHdWlsZCIsImNvbnNvbGUiLCJsb2ciLCJndWlsZHNUb1VzZSIsImxlbmd0aCIsImxvY2FsU3RvcmFnZSIsInJlbW92ZUl0ZW0iLCJzdG9yZWRHdWlsZElkIiwiZ2V0SXRlbSIsImd1aWxkVG9TZWxlY3QiLCJmaW5kIiwiZyIsImlkIiwid2FybiIsIm5hbWUiLCJzZXRJdGVtIiwic2V0Q3VycmVudEd1aWxkTWVtb2l6ZWQiLCJndWlsZElkIiwiZm91bmRHdWlsZCIsImVycm9yIiwiY29udGV4dFZhbHVlIiwiUHJvdmlkZXIiLCJ2YWx1ZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/context/guild-context.tsx\n"));

/***/ })

});