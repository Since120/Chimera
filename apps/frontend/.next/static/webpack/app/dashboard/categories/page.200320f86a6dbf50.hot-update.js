"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/categories/page",{

/***/ "(app-pages-browser)/./src/components/dashboard/category-management/hooks/useCategories.ts":
/*!*****************************************************************************!*\
  !*** ./src/components/dashboard/category-management/hooks/useCategories.ts ***!
  \*****************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCategories: () => (/* binding */ useCategories)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.3.0_@babel+core@7.2_be93e11acbbedc130c6eb3d215a0d5e8/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/core/toaster */ \"(app-pages-browser)/./src/components/core/toaster.tsx\");\n/* harmony import */ var _context_guild_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/context/guild-context */ \"(app-pages-browser)/./src/context/guild-context.tsx\");\n/* harmony import */ var _services_categories__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/categories */ \"(app-pages-browser)/./src/services/categories.ts\");\n/* harmony import */ var _services_zones__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/zones */ \"(app-pages-browser)/./src/services/zones.ts\");\n/* harmony import */ var shared_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shared-types */ \"(app-pages-browser)/../../packages/shared-types/src/index.ts\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n/* __next_internal_client_entry_do_not_use__ useCategories auto */ \n\n\n\n\n // Import CategoryDto\n\nconst useCategories = ()=>{\n    const { currentGuild } = (0,_context_guild_context__WEBPACK_IMPORTED_MODULE_2__.useGuild)();\n    const guildId = (currentGuild === null || currentGuild === void 0 ? void 0 : currentGuild.id) || '';\n    console.log(\"[useCategories] Hook initialisiert/neu gerendert mit guildId: \".concat(guildId));\n    const [categories, setCategories] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [expandedCategories, setExpandedCategories] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [searchQuery, setSearchQuery] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false); // Nur ein Loading-State\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const realtimeChannelRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const loadedGuildIdRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(''); // Verfolgt, für welche Guild geladen wurde\n    // --- Memoized Ladefunktion ---\n    const loadCategories = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[loadCategories]\": async (guildIdToLoad)=>{\n            if (!guildIdToLoad) {\n                console.log('[useCategories] loadCategories: Keine Guild ID übergeben.');\n                setCategories([]); // Zustand leeren\n                return;\n            }\n            console.log(\"[useCategories] loadCategories aufgerufen f\\xfcr Guild: \".concat(guildIdToLoad));\n            setLoading(true);\n            setError(null);\n            try {\n                const categoriesData = await _services_categories__WEBPACK_IMPORTED_MODULE_3__.getCategories(shared_types__WEBPACK_IMPORTED_MODULE_5__.ScopeType.GUILD, guildIdToLoad);\n                const enhancedCategories = await Promise.all(categoriesData.map({\n                    \"useCategories.useCallback[loadCategories]\": async (category)=>{\n                        const zonesData = await _services_zones__WEBPACK_IMPORTED_MODULE_4__.getZonesByCategory(category.id);\n                        const enhancedZones = zonesData.map({\n                            \"useCategories.useCallback[loadCategories].enhancedZones\": (zone)=>({\n                                    id: zone.id,\n                                    name: zone.name,\n                                    zoneKey: zone.zoneKey,\n                                    minutesRequired: zone.intervalMinutes,\n                                    pointsGranted: zone.pointsPerInterval,\n                                    lastActive: '-',\n                                    totalTimeSpent: 0,\n                                    totalUsers: 0\n                                })\n                        }[\"useCategories.useCallback[loadCategories].enhancedZones\"]);\n                        return {\n                            id: category.id,\n                            name: category.name,\n                            guild_id: guildIdToLoad,\n                            allowedRoles: category.allowedRoles || [],\n                            isVisible: category.isVisibleDefault,\n                            sendSetup: category.setupFlowEnabled,\n                            trackingActive: category.defaultTrackingEnabled,\n                            setupTextChannel: category.setupChannelId,\n                            waitingRoomName: category.warteraumChannelId,\n                            lastActive: '-',\n                            totalTimeSpent: 0,\n                            totalUsers: 0,\n                            discordCategoryId: category.discordCategoryId || null,\n                            deletedInDiscord: !category.discordCategoryId,\n                            createdAt: new Date(category.createdAt),\n                            updatedAt: new Date(category.updatedAt),\n                            zones: enhancedZones\n                        };\n                    }\n                }[\"useCategories.useCallback[loadCategories]\"]));\n                setCategories(enhancedCategories);\n                loadedGuildIdRef.current = guildIdToLoad; // Markieren als geladen\n                console.log(\"[useCategories] loadCategories: \".concat(enhancedCategories.length, \" Kategorien geladen f\\xfcr \").concat(guildIdToLoad));\n            } catch (err) {\n                console.error(\"[useCategories] Fehler beim Laden der Kategorien f\\xfcr \".concat(guildIdToLoad, \":\"), err);\n                setError('Fehler beim Laden der Kategorien');\n                // Fallback? Oder leeren State lassen?\n                setCategories([]); // Bei Fehler leeren\n                loadedGuildIdRef.current = guildIdToLoad; // Trotz Fehler als geladen markieren, um Loop zu vermeiden\n            } finally{\n                setLoading(false);\n            }\n        }\n    }[\"useCategories.useCallback[loadCategories]\"], []); // Keine Abhängigkeiten, da Services und State-Setter stabil sind\n    // --- Memoized Realtime Handler ---\n    const handleCategoryChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[handleCategoryChange]\": (payload)=>{\n            console.log('[HANDLER CALLED] handleCategoryChange', payload); // <-- Logging hinzufügen\n            console.log(\"[useCategories Realtime] Kategorie-\\xc4nderung erkannt:\", payload);\n            const { eventType, new: newRecord, old: oldRecord, table } = payload;\n            // Nur auf relevante Tabellen reagieren\n            if (table !== 'categories') {\n                console.log(\"[useCategories Realtime] Ignoriere Event f\\xfcr Tabelle: \".concat(table));\n                return;\n            }\n            const record = newRecord || oldRecord;\n            if (!record || !record.id) return; // Brauchen mindestens eine ID\n            const categoryId = record.id;\n            switch(eventType){\n                case 'INSERT':\n                case 'UPDATE':\n                    ({\n                        \"useCategories.useCallback[handleCategoryChange]\": async ()=>{\n                            try {\n                                console.log(\"[Handler Logic START] \".concat(eventType, \" Category\"));\n                                // Lade die (neue/aktualisierte) Kategorie inkl. ihrer Zonen\n                                const categoryData = await _services_categories__WEBPACK_IMPORTED_MODULE_3__.getCategoryById(categoryId);\n                                const zonesData = await _services_zones__WEBPACK_IMPORTED_MODULE_4__.getZonesByCategory(categoryId);\n                                // Vollständiges Mapping statt Platzhalter\n                                const enhancedZones = zonesData.map({\n                                    \"useCategories.useCallback[handleCategoryChange].enhancedZones\": (zone)=>({\n                                            id: zone.id,\n                                            name: zone.name,\n                                            zoneKey: zone.zoneKey,\n                                            minutesRequired: zone.intervalMinutes,\n                                            pointsGranted: zone.pointsPerInterval,\n                                            lastActive: '-',\n                                            totalTimeSpent: 0,\n                                            totalUsers: 0\n                                        })\n                                }[\"useCategories.useCallback[handleCategoryChange].enhancedZones\"]);\n                                const enhancedCategory = {\n                                    id: categoryData.id,\n                                    name: categoryData.name,\n                                    guild_id: (currentGuild === null || currentGuild === void 0 ? void 0 : currentGuild.id) || '',\n                                    allowedRoles: categoryData.allowedRoles || [],\n                                    isVisible: categoryData.isVisibleDefault,\n                                    sendSetup: categoryData.setupFlowEnabled,\n                                    trackingActive: categoryData.defaultTrackingEnabled,\n                                    setupTextChannel: categoryData.setupChannelId,\n                                    waitingRoomName: categoryData.warteraumChannelId,\n                                    lastActive: '-',\n                                    totalTimeSpent: 0,\n                                    totalUsers: 0,\n                                    discordCategoryId: categoryData.discordCategoryId || null,\n                                    deletedInDiscord: !categoryData.discordCategoryId,\n                                    createdAt: new Date(categoryData.createdAt),\n                                    updatedAt: new Date(categoryData.updatedAt),\n                                    zones: enhancedZones\n                                };\n                                console.log('[State BEFORE update]', categories);\n                                setCategories({\n                                    \"useCategories.useCallback[handleCategoryChange]\": (prev)=>{\n                                        const index = prev.findIndex({\n                                            \"useCategories.useCallback[handleCategoryChange].index\": (c)=>c.id === categoryId\n                                        }[\"useCategories.useCallback[handleCategoryChange].index\"]);\n                                        let newState;\n                                        if (index !== -1) {\n                                            // Update\n                                            console.log(\"[Category \".concat(eventType, \"] Updating existing category at index \").concat(index));\n                                            newState = [\n                                                ...prev\n                                            ];\n                                            newState[index] = enhancedCategory;\n                                        } else {\n                                            // Insert (oder Update, falls es fehlte)\n                                            console.log(\"[Category \".concat(eventType, \"] Adding new category\"));\n                                            newState = [\n                                                ...prev,\n                                                enhancedCategory\n                                            ];\n                                        }\n                                        console.log('[State AFTER update (calculated)]', newState);\n                                        return newState;\n                                    }\n                                }[\"useCategories.useCallback[handleCategoryChange]\"]);\n                                // Logge den State nach der Aktualisierung (im nächsten Render-Zyklus)\n                                setTimeout({\n                                    \"useCategories.useCallback[handleCategoryChange]\": ()=>{\n                                        console.log('[State AFTER update (actual)]', categories);\n                                    }\n                                }[\"useCategories.useCallback[handleCategoryChange]\"], 0);\n                                console.log(\"[Handler Logic END] \".concat(eventType, \" Category\"));\n                            } catch (error) {\n                                console.error(\"[useCategories Realtime] Fehler beim Verarbeiten \".concat(eventType, \":\"), error);\n                            }\n                        }\n                    })[\"useCategories.useCallback[handleCategoryChange]\"]();\n                    break;\n                case 'DELETE':\n                    if (oldRecord === null || oldRecord === void 0 ? void 0 : oldRecord.id) {\n                        console.log(\"[Handler Logic START] DELETE Category \".concat(oldRecord.id));\n                        console.log('[State BEFORE delete]', categories);\n                        setCategories({\n                            \"useCategories.useCallback[handleCategoryChange]\": (prev)=>{\n                                console.log(\"[Category DELETE] Removing category with id \".concat(oldRecord.id));\n                                const newState = prev.filter({\n                                    \"useCategories.useCallback[handleCategoryChange].newState\": (category)=>category.id !== oldRecord.id\n                                }[\"useCategories.useCallback[handleCategoryChange].newState\"]);\n                                console.log('[State AFTER delete (calculated)]', newState);\n                                return newState;\n                            }\n                        }[\"useCategories.useCallback[handleCategoryChange]\"]);\n                        // Logge den State nach der Aktualisierung (im nächsten Render-Zyklus)\n                        setTimeout({\n                            \"useCategories.useCallback[handleCategoryChange]\": ()=>{\n                                console.log('[State AFTER delete (actual)]', categories);\n                            }\n                        }[\"useCategories.useCallback[handleCategoryChange]\"], 0);\n                        console.log(\"[Handler Logic END] DELETE Category \".concat(oldRecord.id));\n                    }\n                    break;\n                default:\n                    console.log(\"[useCategories Realtime] Unbekannter Event-Typ f\\xfcr categories: \".concat(eventType));\n            }\n        }\n    }[\"useCategories.useCallback[handleCategoryChange]\"], [\n        setCategories\n    ]); // Nur von stabilen Funktionen abhängig\n    const handleZoneChangeInCategory = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[handleZoneChangeInCategory]\": (payload)=>{\n            console.log('[HANDLER CALLED] handleZoneChangeInCategory', payload); // <-- Logging hinzufügen\n            console.log(\"[useCategories Realtime] Zonen-\\xc4nderung erkannt:\", payload);\n            const { new: newRecord, old: oldRecord, table } = payload;\n            // Nur auf relevante Tabellen reagieren\n            if (table !== 'zones') {\n                console.log(\"[useCategories Realtime] Ignoriere Event f\\xfcr Tabelle: \".concat(table));\n                return;\n            }\n            const record = newRecord || oldRecord;\n            if (!record || !record.category_id) return;\n            const categoryId = record.category_id;\n            // Lade Zonen für die betroffene Kategorie neu und update die Kategorie im State\n            ({\n                \"useCategories.useCallback[handleZoneChangeInCategory]\": async ()=>{\n                    try {\n                        console.log(\"[Handler Logic START] Update Zones for Category \".concat(categoryId));\n                        const zonesData = await _services_zones__WEBPACK_IMPORTED_MODULE_4__.getZonesByCategory(categoryId);\n                        // Vollständiges Mapping statt Platzhalter\n                        const enhancedZones = zonesData.map({\n                            \"useCategories.useCallback[handleZoneChangeInCategory].enhancedZones\": (zone)=>({\n                                    id: zone.id,\n                                    name: zone.name,\n                                    zoneKey: zone.zoneKey,\n                                    minutesRequired: zone.intervalMinutes,\n                                    pointsGranted: zone.pointsPerInterval,\n                                    lastActive: '-',\n                                    totalTimeSpent: 0,\n                                    totalUsers: 0\n                                })\n                        }[\"useCategories.useCallback[handleZoneChangeInCategory].enhancedZones\"]);\n                        console.log('[State BEFORE zone update]', categories);\n                        setCategories({\n                            \"useCategories.useCallback[handleZoneChangeInCategory]\": (prev)=>{\n                                console.log(\"[Zone Change] Updating zones for category \".concat(categoryId));\n                                const categoryIndex = prev.findIndex({\n                                    \"useCategories.useCallback[handleZoneChangeInCategory].categoryIndex\": (c)=>c.id === categoryId\n                                }[\"useCategories.useCallback[handleZoneChangeInCategory].categoryIndex\"]);\n                                if (categoryIndex === -1) {\n                                    console.log(\"[Zone Change] Category \".concat(categoryId, \" not found in state, no update needed\"));\n                                    return prev;\n                                }\n                                const newState = [\n                                    ...prev\n                                ];\n                                newState[categoryIndex] = {\n                                    ...newState[categoryIndex],\n                                    zones: enhancedZones\n                                };\n                                console.log('[State AFTER zone update (calculated)]', newState);\n                                return newState;\n                            }\n                        }[\"useCategories.useCallback[handleZoneChangeInCategory]\"]);\n                        // Logge den State nach der Aktualisierung (im nächsten Render-Zyklus)\n                        setTimeout({\n                            \"useCategories.useCallback[handleZoneChangeInCategory]\": ()=>{\n                                console.log('[State AFTER zone update (actual)]', categories);\n                            }\n                        }[\"useCategories.useCallback[handleZoneChangeInCategory]\"], 0);\n                        console.log(\"[Handler Logic END] Update Zones for Category \".concat(categoryId));\n                    } catch (error) {\n                        console.error(\"[useCategories Realtime] Fehler beim Laden der Zonen f\\xfcr Kategorie \".concat(categoryId, \":\"), error);\n                    }\n                }\n            })[\"useCategories.useCallback[handleZoneChangeInCategory]\"]();\n        }\n    }[\"useCategories.useCallback[handleZoneChangeInCategory]\"], [\n        setCategories\n    ]); // Nur von stabilen Funktionen abhängig\n    const handleCategoryRoleChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[handleCategoryRoleChange]\": (payload)=>{\n            console.log('[HANDLER CALLED] handleCategoryRoleChange', payload); // <-- Logging hinzufügen\n            console.log(\"[useCategories Realtime] Kategorie-Rollen-\\xc4nderung erkannt:\", payload);\n            const { new: newRecord, old: oldRecord, table } = payload;\n            // Nur auf relevante Tabellen reagieren\n            if (table !== 'category_discord_role_permissions') {\n                console.log(\"[useCategories Realtime] Ignoriere Event f\\xfcr Tabelle: \".concat(table));\n                return;\n            }\n            const record = newRecord || oldRecord;\n            if (!record || !record.category_id) return;\n            const categoryId = record.category_id;\n            ({\n                \"useCategories.useCallback[handleCategoryRoleChange]\": async ()=>{\n                    try {\n                        console.log(\"[Handler Logic START] Update Roles for Category \".concat(categoryId));\n                        const categoryData = await _services_categories__WEBPACK_IMPORTED_MODULE_3__.getCategoryById(categoryId);\n                        if (!categoryData) {\n                            console.log(\"[Handler Logic] Category \".concat(categoryId, \" not found\"));\n                            return;\n                        }\n                        setCategories({\n                            \"useCategories.useCallback[handleCategoryRoleChange]\": (prev)=>prev.map({\n                                    \"useCategories.useCallback[handleCategoryRoleChange]\": (category)=>category.id === categoryId ? {\n                                            ...category,\n                                            allowedRoles: categoryData.allowedRoles || []\n                                        } : category\n                                }[\"useCategories.useCallback[handleCategoryRoleChange]\"])\n                        }[\"useCategories.useCallback[handleCategoryRoleChange]\"]);\n                        console.log(\"[Handler Logic END] Update Roles for Category \".concat(categoryId));\n                    } catch (error) {\n                        console.error(\"[useCategories Realtime] Fehler beim Laden der Rollenberechtigungen f\\xfcr Kategorie \".concat(categoryId, \":\"), error);\n                    }\n                }\n            })[\"useCategories.useCallback[handleCategoryRoleChange]\"]();\n        }\n    }[\"useCategories.useCallback[handleCategoryRoleChange]\"], [\n        setCategories\n    ]); // Nur von stabilen Funktionen abhängig\n    // --- Haupt-useEffect für Laden und Subscription ---\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useCategories.useEffect\": ()=>{\n            const currentGuildId = currentGuild === null || currentGuild === void 0 ? void 0 : currentGuild.id;\n            console.log(\"[useCategories Effect] Running for guildId: \".concat(currentGuildId || 'none'));\n            if (!currentGuildId) {\n                console.log('[useCategories Effect] No guildId, resetting.');\n                setCategories([]);\n                loadedGuildIdRef.current = '';\n                // Alte Subscription entfernen, falls vorhanden\n                if (realtimeChannelRef.current) {\n                    _lib_supabase__WEBPACK_IMPORTED_MODULE_6__.supabase.removeChannel(realtimeChannelRef.current).then({\n                        \"useCategories.useEffect\": ()=>{\n                            console.log('[useCategories Effect] Removed old channel on guildId clear.');\n                            realtimeChannelRef.current = null;\n                        }\n                    }[\"useCategories.useEffect\"]);\n                }\n                return;\n            }\n            // Laden, wenn die Guild neu ist oder die Daten fehlen\n            if (loadedGuildIdRef.current !== currentGuildId) {\n                loadCategories(currentGuildId);\n            }\n            // Subscription Logik (unverändert zur letzten Version, nutzt jetzt memoized Handler)\n            let channel = realtimeChannelRef.current;\n            const channelName = \"categories:\".concat(currentGuildId);\n            // Nur subscriben, wenn noch nicht oder für andere Guild subscribed\n            if (!channel || channel.topic !== \"realtime:\".concat(channelName)) {\n                // Alte Subscription sicher entfernen\n                if (channel) {\n                    _lib_supabase__WEBPACK_IMPORTED_MODULE_6__.supabase.removeChannel(channel).then({\n                        \"useCategories.useEffect\": ()=>{\n                            console.log('[useCategories Effect] Removed previous channel before new subscription.');\n                            realtimeChannelRef.current = null; // Wichtig: Ref zurücksetzen\n                        }\n                    }[\"useCategories.useEffect\"]);\n                }\n                console.log(\"[useCategories Effect] Setting up channel: \".concat(channelName));\n                channel = _lib_supabase__WEBPACK_IMPORTED_MODULE_6__.supabase.channel(channelName);\n                channel.on('postgres_changes', {\n                    event: '*',\n                    schema: 'public',\n                    table: 'categories'\n                }, {\n                    \"useCategories.useEffect\": (payload)=>{\n                        console.log('[useCategories RAW EVENT categories]', payload); // <-- Logging hinzufügen\n                        handleCategoryChange(payload);\n                    }\n                }[\"useCategories.useEffect\"]).on('postgres_changes', {\n                    event: '*',\n                    schema: 'public',\n                    table: 'zones'\n                }, {\n                    \"useCategories.useEffect\": (payload)=>{\n                        console.log('[useCategories RAW EVENT zones]', payload); // <-- Logging hinzufügen\n                        handleZoneChangeInCategory(payload);\n                    }\n                }[\"useCategories.useEffect\"]).on('postgres_changes', {\n                    event: '*',\n                    schema: 'public',\n                    table: 'category_discord_role_permissions'\n                }, {\n                    \"useCategories.useEffect\": (payload)=>{\n                        console.log('[useCategories RAW EVENT category_roles]', payload); // <-- Logging hinzufügen\n                        handleCategoryRoleChange(payload);\n                    }\n                }[\"useCategories.useEffect\"]).subscribe({\n                    \"useCategories.useEffect\": (status, err)=>{\n                        console.log(\"[useCategories Effect] Sub status \".concat(channelName, \":\"), status, err || '');\n                        if (status === 'SUBSCRIBED') {\n                            realtimeChannelRef.current = channel; // Ref erst bei Erfolg setzen\n                            // Nach erfolgreicher Subscription evtl. nochmals laden, falls initialFetch fehlgeschlagen\n                            if (loadedGuildIdRef.current !== currentGuildId) {\n                                console.log('[useCategories Effect] Re-fetching data after successful subscription.');\n                                loadCategories(currentGuildId);\n                            }\n                        } else if (status === 'CHANNEL_ERROR' || status === 'TIMED_OUT') {\n                            console.error(\"[useCategories Effect] Subscription failed for \".concat(channelName, \":\"), err);\n                            realtimeChannelRef.current = null; // Bei Fehler Ref zurücksetzen\n                        }\n                    }\n                }[\"useCategories.useEffect\"]);\n            } else {\n                console.log(\"[useCategories Effect] Already subscribed to \".concat(channelName));\n            }\n            // Cleanup-Funktion\n            return(({\n                \"useCategories.useEffect\": ()=>{\n                    console.log(\"[useCategories Effect] Cleanup for guildId: \".concat(currentGuildId));\n                    // Nur den Channel entfernen, der *in diesem Effekt* erstellt wurde\n                    if (channel && (!realtimeChannelRef.current || realtimeChannelRef.current === channel)) {\n                        console.log(\"[useCategories Effect] Removing channel \".concat(channel.topic));\n                        _lib_supabase__WEBPACK_IMPORTED_MODULE_6__.supabase.removeChannel(channel);\n                        if (realtimeChannelRef.current === channel) {\n                            realtimeChannelRef.current = null;\n                        }\n                    }\n                }\n            })[\"useCategories.useEffect\"]);\n        // ACHTUNG: Die Handler als Abhängigkeiten stellen sicher, dass der Effekt neu läuft, wenn\n        // sich ihre Referenzen ändern (was sie dank useCallback nur tun sollten, wenn sich *ihre* Deps ändern).\n        // `loadCategories` ist ebenfalls memoisiert.\n        }\n    }[\"useCategories.useEffect\"], [\n        currentGuild === null || currentGuild === void 0 ? void 0 : currentGuild.id,\n        loadCategories,\n        handleCategoryChange,\n        handleZoneChangeInCategory,\n        handleCategoryRoleChange\n    ]);\n    // --- Restliche Funktionen (weitgehend unverändert, nutzen jetzt stabile loadCategories) ---\n    const toggleCategoryExpand = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[toggleCategoryExpand]\": (categoryId)=>{\n            setExpandedCategories({\n                \"useCategories.useCallback[toggleCategoryExpand]\": (prevExpanded)=>prevExpanded.includes(categoryId) ? prevExpanded.filter({\n                        \"useCategories.useCallback[toggleCategoryExpand]\": (id)=>id !== categoryId\n                    }[\"useCategories.useCallback[toggleCategoryExpand]\"]) : [\n                        ...prevExpanded,\n                        categoryId\n                    ]\n            }[\"useCategories.useCallback[toggleCategoryExpand]\"]);\n        }\n    }[\"useCategories.useCallback[toggleCategoryExpand]\"], []);\n    const saveCategory = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[saveCategory]\": async (categoryData)=>{\n            if (!guildId) {\n                _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.error('Keine Guild ausgewählt');\n                return false;\n            }\n            setLoading(true);\n            try {\n                if (categoryData.id) {\n                    const updateData = {\n                        name: categoryData.name,\n                        isVisibleDefault: categoryData.isVisible,\n                        setupFlowEnabled: categoryData.sendSetup,\n                        defaultTrackingEnabled: categoryData.trackingActive,\n                        setupChannelName: categoryData.setupTextChannel || undefined,\n                        warteraumChannelName: categoryData.waitingRoomName || undefined,\n                        discordRoleIds: categoryData.allowedRoles\n                    };\n                    await _services_categories__WEBPACK_IMPORTED_MODULE_3__.updateCategory(categoryData.id, updateData);\n                    _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.success('Kategorie erfolgreich aktualisiert');\n                } else {\n                    const createData = {\n                        scope: {\n                            id: guildId,\n                            scopeType: shared_types__WEBPACK_IMPORTED_MODULE_5__.ScopeType.GUILD,\n                            scopeId: guildId\n                        },\n                        name: categoryData.name,\n                        isVisibleDefault: categoryData.isVisible,\n                        setupFlowEnabled: categoryData.sendSetup,\n                        defaultTrackingEnabled: categoryData.trackingActive,\n                        setupChannelName: categoryData.setupTextChannel || undefined,\n                        warteraumChannelName: categoryData.waitingRoomName || undefined,\n                        discordRoleIds: categoryData.allowedRoles\n                    };\n                    await _services_categories__WEBPACK_IMPORTED_MODULE_3__.createCategory(createData);\n                    _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.success('Kategorie erfolgreich erstellt');\n                }\n                // Realtime sollte die Aktualisierung übernehmen, kein manuelles Laden nötig\n                return true;\n            } catch (err) {\n                var _err_response_data, _err_response;\n                console.error('Fehler beim Speichern der Kategorie:', err);\n                _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.error(((_err_response = err.response) === null || _err_response === void 0 ? void 0 : (_err_response_data = _err_response.data) === null || _err_response_data === void 0 ? void 0 : _err_response_data.message) || 'Fehler beim Speichern der Kategorie');\n                return false;\n            } finally{\n                setLoading(false);\n            }\n        }\n    }[\"useCategories.useCallback[saveCategory]\"], [\n        guildId\n    ]); // Abhängig von guildId\n    const deleteCategory = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[deleteCategory]\": async (categoryId)=>{\n            setLoading(true);\n            try {\n                const result = await _services_categories__WEBPACK_IMPORTED_MODULE_3__.deleteCategory(categoryId);\n                if (result.success) {\n                    _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.success('Kategorie erfolgreich gelöscht');\n                }\n                return result;\n            } catch (err) {\n                var _err_response_data, _err_response;\n                console.error('Fehler beim Löschen der Kategorie:', err);\n                const errorMessage = ((_err_response = err.response) === null || _err_response === void 0 ? void 0 : (_err_response_data = _err_response.data) === null || _err_response_data === void 0 ? void 0 : _err_response_data.message) || 'Fehler beim Löschen der Kategorie';\n                _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.error(errorMessage);\n                return {\n                    success: false,\n                    message: errorMessage\n                };\n            } finally{\n                setLoading(false);\n            }\n        }\n    }[\"useCategories.useCallback[deleteCategory]\"], []); // Keine Abhängigkeiten nötig\n    const refetch = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[refetch]\": ()=>{\n            console.log('[useCategories] refetch: Starte Neuladen');\n            if (currentGuild === null || currentGuild === void 0 ? void 0 : currentGuild.id) {\n                loadedGuildIdRef.current = ''; // Erzwingt Neuladen im Effekt\n                loadCategories(currentGuild.id); // Löst manuelles Laden aus\n            }\n        }\n    }[\"useCategories.useCallback[refetch]\"], [\n        currentGuild === null || currentGuild === void 0 ? void 0 : currentGuild.id,\n        loadCategories\n    ]);\n    const getTotalStats = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[getTotalStats]\": ()=>{\n            // ... Berechnung wie bisher ...\n            return {\n                totalCategories: 0,\n                totalUsers: 0,\n                totalTime: 0\n            }; // Placeholder\n        }\n    }[\"useCategories.useCallback[getTotalStats]\"], [\n        categories\n    ]);\n    return {\n        categories,\n        loading,\n        error,\n        expandedCategories,\n        searchQuery,\n        setSearchQuery,\n        toggleCategoryExpand,\n        saveCategory,\n        // updateCategoryWithZones, // Wird jetzt durch Realtime Handler abgedeckt\n        deleteCategory,\n        getTotalStats,\n        refetch\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/dashboard/category-management/hooks/useCategories.ts\n"));

/***/ })

});