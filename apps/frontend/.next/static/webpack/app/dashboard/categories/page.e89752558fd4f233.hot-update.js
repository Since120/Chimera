"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/categories/page",{

/***/ "(app-pages-browser)/./src/components/dashboard/category-management/hooks/useZones.ts":
/*!************************************************************************!*\
  !*** ./src/components/dashboard/category-management/hooks/useZones.ts ***!
  \************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useZones: () => (/* binding */ useZones)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.3.0_@babel+core@7.2_be93e11acbbedc130c6eb3d215a0d5e8/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/core/toaster */ \"(app-pages-browser)/./src/components/core/toaster.tsx\");\n/* harmony import */ var _services_zones__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/services/zones */ \"(app-pages-browser)/./src/services/zones.ts\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n/* __next_internal_client_entry_do_not_use__ useZones auto */ \n\n// import { formatDate } from '../utils/formatters'; // Wahrscheinlich nicht benötigt\n// import { useGuild } from '@/context/guild-context'; // Nicht direkt benötigt\n\n\nconst useZones = (categoryId)=>{\n    // guildId wird hier nicht direkt benötigt\n    const [zones, setZones] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const realtimeChannelRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const loadedCategoryIdRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)('');\n    // --- Memoized Ladefunktion ---\n    const loadZones = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useZones.useCallback[loadZones]\": async (categoryIdToLoad)=>{\n            if (!categoryIdToLoad) {\n                console.log('[useZones] loadZones: Keine Kategorie ID.');\n                setZones([]);\n                return;\n            }\n            console.log(\"[useZones] loadZones aufgerufen f\\xfcr Kategorie: \".concat(categoryIdToLoad));\n            setLoading(true);\n            setError(null);\n            try {\n                const zonesData = await _services_zones__WEBPACK_IMPORTED_MODULE_2__.getZonesByCategory(categoryIdToLoad);\n                const enhancedZones = zonesData.map({\n                    \"useZones.useCallback[loadZones].enhancedZones\": (zone)=>({\n                            id: zone.id,\n                            name: zone.name,\n                            zoneKey: zone.zoneKey,\n                            minutesRequired: zone.intervalMinutes,\n                            pointsGranted: zone.pointsPerInterval,\n                            lastActive: '-',\n                            totalTimeSpent: 0,\n                            totalUsers: 0\n                        })\n                }[\"useZones.useCallback[loadZones].enhancedZones\"]);\n                setZones(enhancedZones);\n                loadedCategoryIdRef.current = categoryIdToLoad;\n                console.log(\"[useZones] loadZones: \".concat(enhancedZones.length, \" Zonen geladen f\\xfcr \").concat(categoryIdToLoad));\n            } catch (err) {\n                console.error(\"[useZones] Fehler beim Laden der Zonen f\\xfcr \".concat(categoryIdToLoad, \":\"), err);\n                setError('Fehler beim Laden der Zonen');\n                setZones([]);\n                loadedCategoryIdRef.current = categoryIdToLoad; // Trotz Fehler als geladen markieren\n            } finally{\n                setLoading(false);\n            }\n        }\n    }[\"useZones.useCallback[loadZones]\"], []); // Keine Abhängigkeiten\n    // --- Memoized Realtime Handler ---\n    const handleZoneChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useZones.useCallback[handleZoneChange]\": (payload)=>{\n            console.log('[HANDLER CALLED] handleZoneChange', payload); // <-- Logging hinzufügen\n            console.log(\"[useZones Realtime] Zonen-\\xc4nderung erkannt:\", payload);\n            const { eventType, new: newRecord, old: oldRecord, table, schema } = payload;\n            // Filterung: Nur auf 'zones' Tabelle und korrektes Schema reagieren\n            if (schema !== 'public' || table !== 'zones') return;\n            // Filterung: Nur auf Änderungen reagieren, die die aktuelle categoryId betreffen\n            const newRecordCategoryId = newRecord ? newRecord.category_id : null;\n            const oldRecordCategoryId = oldRecord ? oldRecord.category_id : null;\n            if (newRecordCategoryId !== categoryId && oldRecordCategoryId !== categoryId) {\n                console.log(\"[useZones Realtime] Event ignoriert, falsche Category ID.\");\n                return;\n            }\n            const record = newRecord || oldRecord;\n            if (!record || !record.id) return;\n            const zoneId = record.id;\n            switch(eventType){\n                case 'INSERT':\n                case 'UPDATE':\n                    ({\n                        \"useZones.useCallback[handleZoneChange]\": async ()=>{\n                            try {\n                                console.log(\"[Handler Logic START] \".concat(eventType, \" Zone\"));\n                                // Lade die (neue/aktualisierte) Zone\n                                const zoneData = await _services_zones__WEBPACK_IMPORTED_MODULE_2__.getZoneById(zoneId);\n                                // Vollständiges Mapping statt Platzhalter\n                                const enhancedZone = {\n                                    id: zoneData.id,\n                                    name: zoneData.name,\n                                    zoneKey: zoneData.zoneKey,\n                                    minutesRequired: zoneData.intervalMinutes,\n                                    pointsGranted: zoneData.pointsPerInterval,\n                                    lastActive: '-',\n                                    totalTimeSpent: 0,\n                                    totalUsers: 0\n                                };\n                                console.log('[Zones State BEFORE update]', zones);\n                                setZones({\n                                    \"useZones.useCallback[handleZoneChange]\": (prev)=>{\n                                        const index = prev.findIndex({\n                                            \"useZones.useCallback[handleZoneChange].index\": (z)=>z.id === zoneId\n                                        }[\"useZones.useCallback[handleZoneChange].index\"]);\n                                        let newState;\n                                        if (index !== -1) {\n                                            console.log(\"[Zone \".concat(eventType, \"] Updating existing zone at index \").concat(index));\n                                            newState = [\n                                                ...prev\n                                            ];\n                                            newState[index] = enhancedZone;\n                                        } else {\n                                            // Nur hinzufügen, wenn es wirklich zu dieser Kategorie gehört\n                                            if (zoneData.categoryId === categoryId) {\n                                                console.log(\"[Zone \".concat(eventType, \"] Adding new zone to category \").concat(categoryId));\n                                                newState = [\n                                                    ...prev,\n                                                    enhancedZone\n                                                ];\n                                            } else {\n                                                console.log(\"[Zone \".concat(eventType, \"] Zone belongs to different category, ignoring\"));\n                                                newState = prev;\n                                            }\n                                        }\n                                        console.log('[Zones State AFTER update (calculated)]', newState);\n                                        return newState;\n                                    }\n                                }[\"useZones.useCallback[handleZoneChange]\"]);\n                                // Logge den State nach der Aktualisierung (im nächsten Render-Zyklus)\n                                setTimeout({\n                                    \"useZones.useCallback[handleZoneChange]\": ()=>{\n                                        console.log('[Zones State AFTER update (actual)]', zones);\n                                    }\n                                }[\"useZones.useCallback[handleZoneChange]\"], 0);\n                                console.log(\"[Handler Logic END] \".concat(eventType, \" Zone\"));\n                            } catch (error) {\n                                console.error(\"[useZones Realtime] Fehler beim Verarbeiten \".concat(eventType, \":\"), error);\n                            }\n                        }\n                    })[\"useZones.useCallback[handleZoneChange]\"]();\n                    break;\n                case 'DELETE':\n                    if (oldRecord === null || oldRecord === void 0 ? void 0 : oldRecord.id) {\n                        console.log(\"[Handler Logic START] DELETE Zone \".concat(oldRecord.id));\n                        console.log('[Zones State BEFORE delete]', zones);\n                        setZones({\n                            \"useZones.useCallback[handleZoneChange]\": (prev)=>{\n                                console.log(\"[Zone DELETE] Removing zone with id \".concat(oldRecord.id));\n                                const newState = prev.filter({\n                                    \"useZones.useCallback[handleZoneChange].newState\": (zone)=>zone.id !== oldRecord.id\n                                }[\"useZones.useCallback[handleZoneChange].newState\"]);\n                                console.log('[Zones State AFTER delete (calculated)]', newState);\n                                return newState;\n                            }\n                        }[\"useZones.useCallback[handleZoneChange]\"]);\n                        // Logge den State nach der Aktualisierung (im nächsten Render-Zyklus)\n                        setTimeout({\n                            \"useZones.useCallback[handleZoneChange]\": ()=>{\n                                console.log('[Zones State AFTER delete (actual)]', zones);\n                            }\n                        }[\"useZones.useCallback[handleZoneChange]\"], 0);\n                        console.log(\"[Handler Logic END] DELETE Zone \".concat(oldRecord.id));\n                    }\n                    break;\n                default:\n                    console.log(\"[useZones Realtime] Unbekannter Event-Typ f\\xfcr zones: \".concat(eventType));\n            }\n        }\n    }[\"useZones.useCallback[handleZoneChange]\"], [\n        categoryId,\n        zones,\n        setZones,\n        _services_zones__WEBPACK_IMPORTED_MODULE_2__\n    ]); // Abhängigkeiten für korrekte Aktualisierung\n    // --- Haupt-useEffect ---\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useZones.useEffect\": ()=>{\n            console.log(\"[useZones Effect] Running for categoryId: \".concat(categoryId || 'none'));\n            if (!categoryId) {\n                console.log('[useZones Effect] No categoryId, resetting.');\n                setZones([]);\n                loadedCategoryIdRef.current = '';\n                if (realtimeChannelRef.current) {\n                    _lib_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.removeChannel(realtimeChannelRef.current).then({\n                        \"useZones.useEffect\": ()=>{\n                            console.log('[useZones Effect] Removed old channel on categoryId clear.');\n                            realtimeChannelRef.current = null;\n                        }\n                    }[\"useZones.useEffect\"]);\n                }\n                return;\n            }\n            if (loadedCategoryIdRef.current !== categoryId) {\n                loadZones(categoryId);\n            }\n            // Subscription Logik\n            let channel = realtimeChannelRef.current;\n            const channelName = \"zones:\".concat(categoryId);\n            if (!channel || channel.topic !== \"realtime:\".concat(channelName)) {\n                if (channel) {\n                    _lib_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.removeChannel(channel).then({\n                        \"useZones.useEffect\": ()=>{\n                            console.log('[useZones Effect] Removed previous channel.');\n                            realtimeChannelRef.current = null;\n                        }\n                    }[\"useZones.useEffect\"]);\n                }\n                console.log(\"[useZones Effect] Setting up channel: \".concat(channelName));\n                channel = _lib_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.channel(channelName);\n                channel.on('postgres_changes', {\n                    event: '*',\n                    schema: 'public',\n                    table: 'zones',\n                    filter: \"category_id=eq.\".concat(categoryId) // Filter auf Server-Seite!\n                }, {\n                    \"useZones.useEffect\": (payload)=>{\n                        console.log('[useZones RAW EVENT zones]', payload); // <-- Logging hinzufügen\n                        handleZoneChange(payload);\n                    }\n                }[\"useZones.useEffect\"]).subscribe({\n                    \"useZones.useEffect\": (status, err)=>{\n                        console.log(\"[useZones Effect] Sub status \".concat(channelName, \":\"), status, err || '');\n                        if (status === 'SUBSCRIBED') {\n                            realtimeChannelRef.current = channel;\n                            if (loadedCategoryIdRef.current !== categoryId) {\n                                loadZones(categoryId); // Erneutes Laden nach erfolgreicher Subscription\n                            }\n                        } else if (status === 'CHANNEL_ERROR' || status === 'TIMED_OUT') {\n                            console.error(\"[useZones Effect] Subscription failed for \".concat(channelName, \":\"), err);\n                            realtimeChannelRef.current = null;\n                        }\n                    }\n                }[\"useZones.useEffect\"]);\n            }\n            // Cleanup\n            return ({\n                \"useZones.useEffect\": ()=>{\n                    console.log(\"[useZones Effect] Cleanup for categoryId: \".concat(categoryId));\n                    if (channel && (!realtimeChannelRef.current || realtimeChannelRef.current === channel)) {\n                        console.log(\"[useZones Effect] Removing channel \".concat(channel.topic));\n                        _lib_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.removeChannel(channel);\n                        if (realtimeChannelRef.current === channel) {\n                            realtimeChannelRef.current = null;\n                        }\n                    }\n                }\n            })[\"useZones.useEffect\"];\n        }\n    }[\"useZones.useEffect\"], [\n        categoryId,\n        loadZones,\n        handleZoneChange\n    ]); // Korrekte Abhängigkeiten\n    // --- Restliche Funktionen (weitgehend unverändert) ---\n    const saveZone = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useZones.useCallback[saveZone]\": async (zoneData)=>{\n            if (!categoryId) {\n                return false;\n            }\n            setLoading(true);\n            try {\n                if (zoneData.id) {} else {}\n                _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.success('Zone gespeichert.');\n                return true;\n            } catch (err) {\n                return false;\n            } finally{\n                setLoading(false);\n            }\n        }\n    }[\"useZones.useCallback[saveZone]\"], [\n        categoryId\n    ]);\n    const deleteZone = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useZones.useCallback[deleteZone]\": async (zoneId)=>{\n            setLoading(true);\n            try {\n                const result = await _services_zones__WEBPACK_IMPORTED_MODULE_2__.deleteZone(zoneId);\n                if (result.success) _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.success('Zone gelöscht.');\n                return result;\n            } catch (err) {\n                return {\n                    success: false,\n                    message: 'Fehler'\n                };\n            } finally{\n                setLoading(false);\n            }\n        }\n    }[\"useZones.useCallback[deleteZone]\"], []);\n    const refetch = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useZones.useCallback[refetch]\": ()=>{\n            console.log('[useZones] refetch: Starte Neuladen');\n            if (categoryId) {\n                loadedCategoryIdRef.current = '';\n                loadZones(categoryId);\n            }\n        }\n    }[\"useZones.useCallback[refetch]\"], [\n        categoryId,\n        loadZones\n    ]);\n    return {\n        zones,\n        loading,\n        error,\n        saveZone,\n        deleteZone,\n        refetch\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/dashboard/category-management/hooks/useZones.ts\n"));

/***/ })

});