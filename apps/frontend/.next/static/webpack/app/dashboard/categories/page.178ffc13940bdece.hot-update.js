"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/categories/page",{

/***/ "(app-pages-browser)/./src/components/dashboard/category-management/hooks/useCategories.ts":
/*!*****************************************************************************!*\
  !*** ./src/components/dashboard/category-management/hooks/useCategories.ts ***!
  \*****************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCategories: () => (/* binding */ useCategories)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.3.0_@babel+core@7.2_be93e11acbbedc130c6eb3d215a0d5e8/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/core/toaster */ \"(app-pages-browser)/./src/components/core/toaster.tsx\");\n/* harmony import */ var _context_guild_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/context/guild-context */ \"(app-pages-browser)/./src/context/guild-context.tsx\");\n/* harmony import */ var _services_categories__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/categories */ \"(app-pages-browser)/./src/services/categories.ts\");\n/* harmony import */ var _services_zones__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/zones */ \"(app-pages-browser)/./src/services/zones.ts\");\n/* harmony import */ var shared_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shared-types */ \"(app-pages-browser)/../../packages/shared-types/src/index.ts\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n/* __next_internal_client_entry_do_not_use__ useCategories auto */ \n\n\n\n\n\n\nconst mapToEnhancedZone = (zone)=>{\n    var _zone_interval_minutes, _zone_points_per_interval;\n    return {\n        id: zone.id,\n        name: zone.name,\n        zoneKey: zone.zone_key || zone.zoneKey,\n        minutesRequired: (_zone_interval_minutes = zone.interval_minutes) !== null && _zone_interval_minutes !== void 0 ? _zone_interval_minutes : zone.intervalMinutes,\n        pointsGranted: (_zone_points_per_interval = zone.points_per_interval) !== null && _zone_points_per_interval !== void 0 ? _zone_points_per_interval : zone.pointsPerInterval,\n        lastActive: '-',\n        totalTimeSpent: 0,\n        totalUsers: 0\n    };\n};\nconst mapToEnhancedCategory = (category, guildId, zones)=>{\n    var _category_is_visible_default, _category_setup_flow_enabled, _category_default_tracking_enabled, _category_setup_channel_id, _category_warteraum_channel_id;\n    return {\n        id: category.id,\n        name: category.name,\n        guild_id: guildId,\n        allowedRoles: category.allowedRoles || [],\n        isVisible: (_category_is_visible_default = category.is_visible_default) !== null && _category_is_visible_default !== void 0 ? _category_is_visible_default : category.isVisibleDefault,\n        sendSetup: (_category_setup_flow_enabled = category.setup_flow_enabled) !== null && _category_setup_flow_enabled !== void 0 ? _category_setup_flow_enabled : category.setupFlowEnabled,\n        trackingActive: (_category_default_tracking_enabled = category.default_tracking_enabled) !== null && _category_default_tracking_enabled !== void 0 ? _category_default_tracking_enabled : category.defaultTrackingEnabled,\n        setupTextChannel: (_category_setup_channel_id = category.setup_channel_id) !== null && _category_setup_channel_id !== void 0 ? _category_setup_channel_id : category.setupChannelId,\n        waitingRoomName: (_category_warteraum_channel_id = category.warteraum_channel_id) !== null && _category_warteraum_channel_id !== void 0 ? _category_warteraum_channel_id : category.warteraumChannelId,\n        lastActive: '-',\n        totalTimeSpent: 0,\n        totalUsers: 0,\n        discordCategoryId: category.discord_category_id || category.discordCategoryId || null,\n        deletedInDiscord: !(category.discord_category_id || category.discordCategoryId),\n        createdAt: new Date(category.created_at || category.createdAt),\n        updatedAt: new Date(category.updated_at || category.updatedAt),\n        zones: zones\n    };\n};\nconst useCategories = ()=>{\n    const { currentGuild } = (0,_context_guild_context__WEBPACK_IMPORTED_MODULE_2__.useGuild)();\n    const guildId = (currentGuild === null || currentGuild === void 0 ? void 0 : currentGuild.id) || '';\n    const [categories, setCategories] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [expandedCategories, setExpandedCategories] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [searchQuery, setSearchQuery] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const realtimeChannelRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const loadedGuildIdRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)('');\n    const initialLoadCompleteRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const loadCategories = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[loadCategories]\": async (guildIdToLoad)=>{\n            if (!guildIdToLoad) return;\n            if (loading && loadedGuildIdRef.current === guildIdToLoad) return;\n            console.log(\"[useCategories] loadCategories: Loading for Guild: \".concat(guildIdToLoad));\n            setLoading(true);\n            setError(null);\n            initialLoadCompleteRef.current = false;\n            try {\n                const categoriesData = await _services_categories__WEBPACK_IMPORTED_MODULE_3__.getCategories(shared_types__WEBPACK_IMPORTED_MODULE_5__.ScopeType.GUILD, guildIdToLoad);\n                const enhancedCategoriesPromises = categoriesData.map({\n                    \"useCategories.useCallback[loadCategories].enhancedCategoriesPromises\": async (category)=>{\n                        const zonesData = await _services_zones__WEBPACK_IMPORTED_MODULE_4__.getZonesByCategory(category.id);\n                        const enhancedZones = zonesData.map(mapToEnhancedZone);\n                        // Explicitly fetch roles here as they are not in the categories payload\n                        const rolesData = await _services_categories__WEBPACK_IMPORTED_MODULE_3__.getCategoryRolePermissions(category.id);\n                        const allowedRoles = rolesData.map({\n                            \"useCategories.useCallback[loadCategories].enhancedCategoriesPromises.allowedRoles\": (p)=>p.discordRoleId\n                        }[\"useCategories.useCallback[loadCategories].enhancedCategoriesPromises.allowedRoles\"]);\n                        const mappedCategory = mapToEnhancedCategory(category, guildIdToLoad, enhancedZones);\n                        mappedCategory.allowedRoles = allowedRoles; // Add fetched roles\n                        return mappedCategory;\n                    }\n                }[\"useCategories.useCallback[loadCategories].enhancedCategoriesPromises\"]);\n                const enhancedCategories = await Promise.all(enhancedCategoriesPromises);\n                setCategories(enhancedCategories);\n                loadedGuildIdRef.current = guildIdToLoad;\n                initialLoadCompleteRef.current = true;\n                console.log(\"[useCategories] loadCategories: \".concat(enhancedCategories.length, \" categories loaded for \").concat(guildIdToLoad));\n            } catch (err) {\n                console.error(\"[useCategories] Error loading categories for \".concat(guildIdToLoad, \":\"), err);\n                setError('Fehler beim Laden der Kategorien');\n                setCategories([]);\n                loadedGuildIdRef.current = guildIdToLoad;\n                initialLoadCompleteRef.current = true;\n            } finally{\n                setLoading(false);\n            }\n        }\n    }[\"useCategories.useCallback[loadCategories]\"], [\n        loading\n    ]);\n    const handleRealtimeEvent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[handleRealtimeEvent]\": (payload)=>{\n            console.log('[useCategories RAW EVENT]', payload);\n            const { eventType, new: newRecord, old: oldRecord, table, schema } = payload;\n            if (schema !== 'public') return;\n            const record = newRecord || oldRecord;\n            if (!record) return;\n            const affectedCategoryId = table === 'categories' ? record.id : record.category_id;\n            if (!affectedCategoryId) return;\n            // Basic check if the event might belong to the current guild (can be improved with RLS/filters)\n            // This assumes the payload *might* contain guild_id indirectly (needs schema knowledge)\n            // For now, we optimistically process if category matches one in state\n            const isRelevantCategory = {\n                \"useCategories.useCallback[handleRealtimeEvent].isRelevantCategory\": (catId)=>categories.some({\n                        \"useCategories.useCallback[handleRealtimeEvent].isRelevantCategory\": (c)=>c.id === catId && c.guild_id === guildId\n                    }[\"useCategories.useCallback[handleRealtimeEvent].isRelevantCategory\"])\n            }[\"useCategories.useCallback[handleRealtimeEvent].isRelevantCategory\"];\n            console.log(\"[HANDLER CALLED] Table: \".concat(table, \", Event: \").concat(eventType, \", Affected Category: \").concat(affectedCategoryId));\n            if (table === 'categories') {\n                // Ensure event is for the current guild if possible (payload structure dependent)\n                // If record.guild_id exists and record.guild_id !== guildId, return.\n                // Since it might not exist, we rely on the subscription filter for now.\n                if (eventType === 'INSERT' && newRecord) {\n                    console.log(\"[Realtime] Category INSERT: \".concat(newRecord.id));\n                    // Assume new category belongs to current guild if no guild_id in payload\n                    const newCategory = mapToEnhancedCategory(newRecord, guildId, []);\n                    setCategories({\n                        \"useCategories.useCallback[handleRealtimeEvent]\": (prev)=>{\n                            if (!prev.some({\n                                \"useCategories.useCallback[handleRealtimeEvent]\": (c)=>c.id === newCategory.id\n                            }[\"useCategories.useCallback[handleRealtimeEvent]\"])) {\n                                return [\n                                    ...prev,\n                                    newCategory\n                                ];\n                            }\n                            return prev;\n                        }\n                    }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                    _services_zones__WEBPACK_IMPORTED_MODULE_4__.getZonesByCategory(newRecord.id).then({\n                        \"useCategories.useCallback[handleRealtimeEvent]\": (zonesData)=>{\n                            const enhancedZones = zonesData.map(mapToEnhancedZone);\n                            setCategories({\n                                \"useCategories.useCallback[handleRealtimeEvent]\": (prev)=>prev.map({\n                                        \"useCategories.useCallback[handleRealtimeEvent]\": (c)=>c.id === newRecord.id ? {\n                                                ...c,\n                                                zones: enhancedZones\n                                            } : c\n                                    }[\"useCategories.useCallback[handleRealtimeEvent]\"])\n                            }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                        }\n                    }[\"useCategories.useCallback[handleRealtimeEvent]\"]).catch({\n                        \"useCategories.useCallback[handleRealtimeEvent]\": (err)=>console.error(\"[Realtime] Failed fetch zones for new cat \".concat(newRecord.id), err)\n                    }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                    _services_categories__WEBPACK_IMPORTED_MODULE_3__.getCategoryRolePermissions(newRecord.id).then({\n                        \"useCategories.useCallback[handleRealtimeEvent]\": (rolesData)=>{\n                            const allowedRoles = rolesData.map({\n                                \"useCategories.useCallback[handleRealtimeEvent].allowedRoles\": (p)=>p.discordRoleId\n                            }[\"useCategories.useCallback[handleRealtimeEvent].allowedRoles\"]);\n                            setCategories({\n                                \"useCategories.useCallback[handleRealtimeEvent]\": (prev)=>prev.map({\n                                        \"useCategories.useCallback[handleRealtimeEvent]\": (c)=>c.id === newRecord.id ? {\n                                                ...c,\n                                                allowedRoles: allowedRoles\n                                            } : c\n                                    }[\"useCategories.useCallback[handleRealtimeEvent]\"])\n                            }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                        }\n                    }[\"useCategories.useCallback[handleRealtimeEvent]\"]).catch({\n                        \"useCategories.useCallback[handleRealtimeEvent]\": (err)=>console.error(\"[Realtime] Failed fetch roles for new cat \".concat(newRecord.id), err)\n                    }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                } else if (eventType === 'UPDATE' && newRecord) {\n                    console.log(\"[Realtime] Category UPDATE: \".concat(newRecord.id));\n                    setCategories({\n                        \"useCategories.useCallback[handleRealtimeEvent]\": (prev)=>prev.map({\n                                \"useCategories.useCallback[handleRealtimeEvent]\": (c)=>c.id === newRecord.id ? mapToEnhancedCategory(newRecord, guildId, c.zones) // Use helper, keep existing zones\n                                     : c\n                            }[\"useCategories.useCallback[handleRealtimeEvent]\"])\n                    }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                    // If roles might have changed implicitly, refetch them\n                    _services_categories__WEBPACK_IMPORTED_MODULE_3__.getCategoryRolePermissions(newRecord.id).then({\n                        \"useCategories.useCallback[handleRealtimeEvent]\": (rolesData)=>{\n                            const allowedRoles = rolesData.map({\n                                \"useCategories.useCallback[handleRealtimeEvent].allowedRoles\": (p)=>p.discordRoleId\n                            }[\"useCategories.useCallback[handleRealtimeEvent].allowedRoles\"]);\n                            setCategories({\n                                \"useCategories.useCallback[handleRealtimeEvent]\": (prev)=>prev.map({\n                                        \"useCategories.useCallback[handleRealtimeEvent]\": (c)=>c.id === newRecord.id ? {\n                                                ...c,\n                                                allowedRoles: allowedRoles\n                                            } : c\n                                    }[\"useCategories.useCallback[handleRealtimeEvent]\"])\n                            }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                        }\n                    }[\"useCategories.useCallback[handleRealtimeEvent]\"]).catch({\n                        \"useCategories.useCallback[handleRealtimeEvent]\": (err)=>console.error(\"[Realtime] Failed fetch roles for updated cat \".concat(newRecord.id), err)\n                    }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                } else if (eventType === 'DELETE' && oldRecord) {\n                    console.log(\"[Realtime] Category DELETE: \".concat(oldRecord.id));\n                    setCategories({\n                        \"useCategories.useCallback[handleRealtimeEvent]\": (prev)=>prev.filter({\n                                \"useCategories.useCallback[handleRealtimeEvent]\": (c)=>c.id !== oldRecord.id\n                            }[\"useCategories.useCallback[handleRealtimeEvent]\"])\n                    }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                }\n            } else if (table === 'zones') {\n                console.log(\"[Realtime] Zone \".concat(eventType, \" for Category \").concat(affectedCategoryId));\n                // Refetch zones for the affected category for simplicity and accuracy\n                if (categories.some({\n                    \"useCategories.useCallback[handleRealtimeEvent]\": (c)=>c.id === affectedCategoryId\n                }[\"useCategories.useCallback[handleRealtimeEvent]\"])) {\n                    ({\n                        \"useCategories.useCallback[handleRealtimeEvent]\": async ()=>{\n                            try {\n                                const zonesData = await _services_zones__WEBPACK_IMPORTED_MODULE_4__.getZonesByCategory(affectedCategoryId);\n                                const enhancedZones = zonesData.map(mapToEnhancedZone);\n                                setCategories({\n                                    \"useCategories.useCallback[handleRealtimeEvent]\": (prev)=>prev.map({\n                                            \"useCategories.useCallback[handleRealtimeEvent]\": (c)=>c.id === affectedCategoryId ? {\n                                                    ...c,\n                                                    zones: enhancedZones\n                                                } : c\n                                        }[\"useCategories.useCallback[handleRealtimeEvent]\"])\n                                }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                            } catch (error) {\n                                console.error(\"[Realtime] Error refetching zones for category \".concat(affectedCategoryId, \":\"), error);\n                            }\n                        }\n                    })[\"useCategories.useCallback[handleRealtimeEvent]\"]();\n                }\n            } else if (table === 'category_discord_role_permissions') {\n                console.log(\"[Realtime] Roles \".concat(eventType, \" for Category \").concat(affectedCategoryId));\n                // Refetch roles for the affected category\n                if (categories.some({\n                    \"useCategories.useCallback[handleRealtimeEvent]\": (c)=>c.id === affectedCategoryId\n                }[\"useCategories.useCallback[handleRealtimeEvent]\"])) {\n                    ({\n                        \"useCategories.useCallback[handleRealtimeEvent]\": async ()=>{\n                            try {\n                                const rolesData = await _services_categories__WEBPACK_IMPORTED_MODULE_3__.getCategoryRolePermissions(affectedCategoryId);\n                                const allowedRoles = rolesData.map({\n                                    \"useCategories.useCallback[handleRealtimeEvent].allowedRoles\": (p)=>p.discordRoleId\n                                }[\"useCategories.useCallback[handleRealtimeEvent].allowedRoles\"]);\n                                setCategories({\n                                    \"useCategories.useCallback[handleRealtimeEvent]\": (prev)=>prev.map({\n                                            \"useCategories.useCallback[handleRealtimeEvent]\": (c)=>c.id === affectedCategoryId ? {\n                                                    ...c,\n                                                    allowedRoles: allowedRoles\n                                                } : c\n                                        }[\"useCategories.useCallback[handleRealtimeEvent]\"])\n                                }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                            } catch (error) {\n                                console.error(\"[Realtime] Error refetching roles for category \".concat(affectedCategoryId, \":\"), error);\n                            }\n                        }\n                    })[\"useCategories.useCallback[handleRealtimeEvent]\"]();\n                }\n            }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }\n    }[\"useCategories.useCallback[handleRealtimeEvent]\"], [\n        guildId,\n        setCategories,\n        categories\n    ]); // 'categories' added as dep because we check against it\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useCategories.useEffect\": ()=>{\n            const currentGuildId = currentGuild === null || currentGuild === void 0 ? void 0 : currentGuild.id;\n            console.log(\"[useCategories Effect] Running for guildId: \".concat(currentGuildId || 'none'));\n            if (!currentGuildId) {\n                setCategories([]);\n                loadedGuildIdRef.current = '';\n                initialLoadCompleteRef.current = false;\n                if (realtimeChannelRef.current) {\n                    _lib_supabase__WEBPACK_IMPORTED_MODULE_6__.supabase.removeChannel(realtimeChannelRef.current);\n                    realtimeChannelRef.current = null;\n                }\n                return;\n            }\n            if (loadedGuildIdRef.current !== currentGuildId) {\n                loadCategories(currentGuildId);\n            }\n            let channel = realtimeChannelRef.current;\n            const channelName = \"db-changes\"; // Listen to all changes on one channel\n            if (!channel || !channel.isSubscribed()) {\n                if (channel) _lib_supabase__WEBPACK_IMPORTED_MODULE_6__.supabase.removeChannel(channel);\n                console.log(\"[useCategories Effect] Setting up channel: \".concat(channelName));\n                channel = _lib_supabase__WEBPACK_IMPORTED_MODULE_6__.supabase.channel(channelName);\n                channel.on('postgres_changes', {\n                    event: '*',\n                    schema: 'public',\n                    table: 'categories'\n                }, handleRealtimeEvent).on('postgres_changes', {\n                    event: '*',\n                    schema: 'public',\n                    table: 'zones'\n                }, handleRealtimeEvent).on('postgres_changes', {\n                    event: '*',\n                    schema: 'public',\n                    table: 'category_discord_role_permissions'\n                }, handleRealtimeEvent).subscribe({\n                    \"useCategories.useEffect\": (status, err)=>{\n                        console.log(\"[useCategories Effect] Sub status \".concat(channelName, \":\"), status, err || '');\n                        if (status === 'SUBSCRIBED') {\n                            realtimeChannelRef.current = channel;\n                            if (!initialLoadCompleteRef.current) {\n                                console.log('[useCategories Effect] Re-fetching data after successful subscription.');\n                                loadCategories(currentGuildId);\n                            }\n                        } else {\n                            realtimeChannelRef.current = null;\n                        }\n                    }\n                }[\"useCategories.useEffect\"]);\n            } else {\n                console.log(\"[useCategories Effect] Already subscribed to \".concat(channelName));\n            }\n            // Cleanup\n            return ({\n                \"useCategories.useEffect\": ()=>{\n                    console.log(\"[useCategories Effect] Cleanup for guildId: \".concat(currentGuildId));\n                // Don't remove the channel here if it's a shared channel\n                // Supabase handles channel cleanup on unmount/disconnect automatically\n                // if (realtimeChannelRef.current) {\n                //   supabase.removeChannel(realtimeChannelRef.current);\n                //   realtimeChannelRef.current = null;\n                // }\n                }\n            })[\"useCategories.useEffect\"];\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }\n    }[\"useCategories.useEffect\"], [\n        currentGuild === null || currentGuild === void 0 ? void 0 : currentGuild.id,\n        loadCategories,\n        handleRealtimeEvent\n    ]); // Dependencies updated\n    const toggleCategoryExpand = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[toggleCategoryExpand]\": (categoryId)=>{\n            setExpandedCategories({\n                \"useCategories.useCallback[toggleCategoryExpand]\": (prev)=>prev.includes(categoryId) ? prev.filter({\n                        \"useCategories.useCallback[toggleCategoryExpand]\": (id)=>id !== categoryId\n                    }[\"useCategories.useCallback[toggleCategoryExpand]\"]) : [\n                        ...prev,\n                        categoryId\n                    ]\n            }[\"useCategories.useCallback[toggleCategoryExpand]\"]);\n        }\n    }[\"useCategories.useCallback[toggleCategoryExpand]\"], []);\n    const saveCategory = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[saveCategory]\": async (categoryData)=>{\n            if (!guildId) {\n                _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.error('Keine Guild ausgewählt');\n                return false;\n            }\n            setLoading(true);\n            try {\n                const dtoDataScope = {\n                    scopeType: shared_types__WEBPACK_IMPORTED_MODULE_5__.ScopeType.GUILD,\n                    scopeId: guildId\n                }; // Define scope\n                if (categoryData.id) {\n                    const updateData = {\n                        name: categoryData.name,\n                        isVisibleDefault: categoryData.isVisible,\n                        setupFlowEnabled: categoryData.sendSetup,\n                        defaultTrackingEnabled: categoryData.trackingActive,\n                        setupChannelName: categoryData.setupTextChannel || undefined,\n                        warteraumChannelName: categoryData.waitingRoomName || undefined,\n                        discordRoleIds: categoryData.allowedRoles\n                    };\n                    await _services_categories__WEBPACK_IMPORTED_MODULE_3__.updateCategory(categoryData.id, updateData);\n                    _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.success('Kategorie aktualisiert');\n                } else {\n                    const createData = {\n                        scope: dtoDataScope,\n                        name: categoryData.name,\n                        isVisibleDefault: categoryData.isVisible,\n                        setupFlowEnabled: categoryData.sendSetup,\n                        defaultTrackingEnabled: categoryData.trackingActive,\n                        setupChannelName: categoryData.setupTextChannel || undefined,\n                        warteraumChannelName: categoryData.waitingRoomName || undefined,\n                        discordRoleIds: categoryData.allowedRoles\n                    };\n                    await _services_categories__WEBPACK_IMPORTED_MODULE_3__.createCategory(createData);\n                    _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.success('Kategorie erstellt');\n                }\n                return true;\n            } catch (err) {\n                var _err_response_data, _err_response;\n                console.error('Fehler beim Speichern der Kategorie:', err);\n                _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.error(((_err_response = err.response) === null || _err_response === void 0 ? void 0 : (_err_response_data = _err_response.data) === null || _err_response_data === void 0 ? void 0 : _err_response_data.message) || 'Fehler beim Speichern der Kategorie');\n                return false;\n            } finally{\n                setLoading(false);\n            }\n        }\n    }[\"useCategories.useCallback[saveCategory]\"], [\n        guildId\n    ]);\n    const deleteCategory = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[deleteCategory]\": async (categoryId)=>{\n            setLoading(true);\n            try {\n                const result = await _services_categories__WEBPACK_IMPORTED_MODULE_3__.deleteCategory(categoryId);\n                if (result.success) _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.success('Kategorie gelöscht.');\n                else _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.error(result.message || 'Fehler beim Löschen');\n                return result;\n            } catch (err) {\n                var _err_response_data, _err_response;\n                console.error('Fehler beim Löschen der Kategorie:', err);\n                const message = ((_err_response = err.response) === null || _err_response === void 0 ? void 0 : (_err_response_data = _err_response.data) === null || _err_response_data === void 0 ? void 0 : _err_response_data.message) || 'Fehler beim Löschen der Kategorie';\n                _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.error(message);\n                return {\n                    success: false,\n                    message\n                };\n            } finally{\n                setLoading(false);\n            }\n        }\n    }[\"useCategories.useCallback[deleteCategory]\"], []);\n    const refetch = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[refetch]\": ()=>{\n            console.log('[useCategories] refetch triggered');\n            if (currentGuild === null || currentGuild === void 0 ? void 0 : currentGuild.id) {\n                loadedGuildIdRef.current = '';\n                initialLoadCompleteRef.current = false;\n                loadCategories(currentGuild.id);\n            }\n        }\n    }[\"useCategories.useCallback[refetch]\"], [\n        currentGuild === null || currentGuild === void 0 ? void 0 : currentGuild.id,\n        loadCategories\n    ]);\n    const getTotalStats = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[getTotalStats]\": ()=>({\n                totalCategories: categories.length,\n                totalUsers: categories.reduce({\n                    \"useCategories.useCallback[getTotalStats]\": (sum, c)=>sum + c.totalUsers\n                }[\"useCategories.useCallback[getTotalStats]\"], 0),\n                totalTime: categories.reduce({\n                    \"useCategories.useCallback[getTotalStats]\": (sum, c)=>sum + c.totalTimeSpent\n                }[\"useCategories.useCallback[getTotalStats]\"], 0)\n            })\n    }[\"useCategories.useCallback[getTotalStats]\"], [\n        categories\n    ]);\n    return {\n        categories,\n        loading,\n        error,\n        expandedCategories,\n        searchQuery,\n        setSearchQuery,\n        toggleCategoryExpand,\n        saveCategory,\n        deleteCategory,\n        getTotalStats,\n        refetch\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/dashboard/category-management/hooks/useCategories.ts\n"));

/***/ })

});