/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/categories/page",{

/***/ "(app-pages-browser)/../../node_modules/.pnpm/next@15.3.0_@babel+core@7.2_be93e11acbbedc130c6eb3d215a0d5e8/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cinfo%5C%5CDocuments%5C%5CDiscord%20Bot%5C%5CChimera%5C%5Capps%5C%5Cfrontend%5C%5Csrc%5C%5Ccomponents%5C%5Cdashboard%5C%5Ccategory-management%5C%5Chooks%5C%5CuseCategories.ts%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cinfo%5C%5CDocuments%5C%5CDiscord%20Bot%5C%5CChimera%5C%5Capps%5C%5Cfrontend%5C%5Csrc%5C%5Ccomponents%5C%5Cdashboard%5C%5Ccategory-management%5C%5Chooks%5C%5CuseZones.ts%22%2C%22ids%22%3A%5B%22useZones%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cinfo%5C%5CDocuments%5C%5CDiscord%20Bot%5C%5CChimera%5C%5Cnode_modules%5C%5C.pnpm%5C%5C%40mui%2Bmaterial%406.3.1_%40emotio_e21801b4b04f18445829542588ce660c%5C%5Cnode_modules%5C%5C%40mui%5C%5Cmaterial%5C%5CBox%5C%5CBox.js%22%2C%22ids%22%3A%5B%22default%22%5D%7D&server=false!":

  !*** ../../node_modules/.pnpm/next@15.3.0_@babel+core@7.2_be93e11acbbedc130c6eb3d215a0d5e8/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cinfo%5C%5CDocuments%5C%5CDiscord%20Bot%5C%5CChimera%5C%5Capps%5C%5Cfrontend%5C%5Csrc%5C%5Ccomponents%5C%5Cdashboard%5C%5Ccategory-management%5C%5Chooks%5C%5CuseCategories.ts%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cinfo%5C%5CDocuments%5C%5CDiscord%20Bot%5C%5CChimera%5C%5Capps%5C%5Cfrontend%5C%5Csrc%5C%5Ccomponents%5C%5Cdashboard%5C%5Ccategory-management%5C%5Chooks%5C%5CuseZones.ts%22%2C%22ids%22%3A%5B%22useZones%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cinfo%5C%5CDocuments%5C%5CDiscord%20Bot%5C%5CChimera%5C%5Cnode_modules%5C%5C.pnpm%5C%5C%40mui%2Bmaterial%406.3.1_%40emotio_e21801b4b04f18445829542588ce660c%5C%5Cnode_modules%5C%5C%40mui%5C%5Cmaterial%5C%5CBox%5C%5CBox.js%22%2C%22ids%22%3A%5B%22default%22%5D%7D&server=false! ***!

/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/dashboard/category-management/hooks/useCategories.ts */ \"(app-pages-browser)/./src/components/dashboard/category-management/hooks/useCategories.ts\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/dashboard/category-management/hooks/useZones.ts */ \"(app-pages-browser)/./src/components/dashboard/category-management/hooks/useZones.ts\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ../../node_modules/.pnpm/@mui+material@6.3.1_@emotio_e21801b4b04f18445829542588ce660c/node_modules/@mui/material/Box/Box.js */ \"(app-pages-browser)/../../node_modules/.pnpm/@mui+material@6.3.1_@emotio_e21801b4b04f18445829542588ce660c/node_modules/@mui/material/Box/Box.js\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNS4zLjBfQGJhYmVsK2NvcmVANy4yX2JlOTNlMTFhY2JiZWRjMTMwYzZlYjNkMjE1YTBkNWU4L25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDaW5mbyU1QyU1Q0RvY3VtZW50cyU1QyU1Q0Rpc2NvcmQlMjBCb3QlNUMlNUNDaGltZXJhJTVDJTVDYXBwcyU1QyU1Q2Zyb250ZW5kJTVDJTVDc3JjJTVDJTVDY29tcG9uZW50cyU1QyU1Q2Rhc2hib2FyZCU1QyU1Q2NhdGVnb3J5LW1hbmFnZW1lbnQlNUMlNUNob29rcyU1QyU1Q3VzZUNhdGVnb3JpZXMudHMlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDaW5mbyU1QyU1Q0RvY3VtZW50cyU1QyU1Q0Rpc2NvcmQlMjBCb3QlNUMlNUNDaGltZXJhJTVDJTVDYXBwcyU1QyU1Q2Zyb250ZW5kJTVDJTVDc3JjJTVDJTVDY29tcG9uZW50cyU1QyU1Q2Rhc2hib2FyZCU1QyU1Q2NhdGVnb3J5LW1hbmFnZW1lbnQlNUMlNUNob29rcyU1QyU1Q3VzZVpvbmVzLnRzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTIydXNlWm9uZXMlMjIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQyUzQSU1QyU1Q1VzZXJzJTVDJTVDaW5mbyU1QyU1Q0RvY3VtZW50cyU1QyU1Q0Rpc2NvcmQlMjBCb3QlNUMlNUNDaGltZXJhJTVDJTVDbm9kZV9tb2R1bGVzJTVDJTVDLnBucG0lNUMlNUMlNDBtdWklMkJtYXRlcmlhbCU0MDYuMy4xXyU0MGVtb3Rpb19lMjE4MDFiNGIwNGYxODQ0NTgyOTU0MjU4OGNlNjYwYyU1QyU1Q25vZGVfbW9kdWxlcyU1QyU1QyU0MG11aSU1QyU1Q21hdGVyaWFsJTVDJTVDQm94JTVDJTVDQm94LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTIyZGVmYXVsdCUyMiU1RCU3RCZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBLG9RQUErSztBQUMvSztBQUNBLDBQQUF3TTtBQUN4TTtBQUNBLGdYQUFnUCIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQzpcXFxcVXNlcnNcXFxcaW5mb1xcXFxEb2N1bWVudHNcXFxcRGlzY29yZCBCb3RcXFxcQ2hpbWVyYVxcXFxhcHBzXFxcXGZyb250ZW5kXFxcXHNyY1xcXFxjb21wb25lbnRzXFxcXGRhc2hib2FyZFxcXFxjYXRlZ29yeS1tYW5hZ2VtZW50XFxcXGhvb2tzXFxcXHVzZUNhdGVnb3JpZXMudHNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiwgd2VicGFja0V4cG9ydHM6IFtcInVzZVpvbmVzXCJdICovIFwiQzpcXFxcVXNlcnNcXFxcaW5mb1xcXFxEb2N1bWVudHNcXFxcRGlzY29yZCBCb3RcXFxcQ2hpbWVyYVxcXFxhcHBzXFxcXGZyb250ZW5kXFxcXHNyY1xcXFxjb21wb25lbnRzXFxcXGRhc2hib2FyZFxcXFxjYXRlZ29yeS1tYW5hZ2VtZW50XFxcXGhvb2tzXFxcXHVzZVpvbmVzLnRzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIsIHdlYnBhY2tFeHBvcnRzOiBbXCJkZWZhdWx0XCJdICovIFwiQzpcXFxcVXNlcnNcXFxcaW5mb1xcXFxEb2N1bWVudHNcXFxcRGlzY29yZCBCb3RcXFxcQ2hpbWVyYVxcXFxub2RlX21vZHVsZXNcXFxcLnBucG1cXFxcQG11aSttYXRlcmlhbEA2LjMuMV9AZW1vdGlvX2UyMTgwMWI0YjA0ZjE4NDQ1ODI5NTQyNTg4Y2U2NjBjXFxcXG5vZGVfbW9kdWxlc1xcXFxAbXVpXFxcXG1hdGVyaWFsXFxcXEJveFxcXFxCb3guanNcIik7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../../node_modules/.pnpm/next@15.3.0_@babel+core@7.2_be93e11acbbedc130c6eb3d215a0d5e8/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cinfo%5C%5CDocuments%5C%5CDiscord%20Bot%5C%5CChimera%5C%5Capps%5C%5Cfrontend%5C%5Csrc%5C%5Ccomponents%5C%5Cdashboard%5C%5Ccategory-management%5C%5Chooks%5C%5CuseCategories.ts%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cinfo%5C%5CDocuments%5C%5CDiscord%20Bot%5C%5CChimera%5C%5Capps%5C%5Cfrontend%5C%5Csrc%5C%5Ccomponents%5C%5Cdashboard%5C%5Ccategory-management%5C%5Chooks%5C%5CuseZones.ts%22%2C%22ids%22%3A%5B%22useZones%22%5D%7D&modules=%7B%22request%22%3A%22C%3A%5C%5CUsers%5C%5Cinfo%5C%5CDocuments%5C%5CDiscord%20Bot%5C%5CChimera%5C%5Cnode_modules%5C%5C.pnpm%5C%5C%40mui%2Bmaterial%406.3.1_%40emotio_e21801b4b04f18445829542588ce660c%5C%5Cnode_modules%5C%5C%40mui%5C%5Cmaterial%5C%5CBox%5C%5CBox.js%22%2C%22ids%22%3A%5B%22default%22%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/dashboard/category-management/hooks/useCategories.ts":
/*!*****************************************************************************!*\
  !*** ./src/components/dashboard/category-management/hooks/useCategories.ts ***!
  \*****************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCategories: () => (/* binding */ useCategories)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.3.0_@babel+core@7.2_be93e11acbbedc130c6eb3d215a0d5e8/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/core/toaster */ \"(app-pages-browser)/./src/components/core/toaster.tsx\");\n/* harmony import */ var _context_guild_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/context/guild-context */ \"(app-pages-browser)/./src/context/guild-context.tsx\");\n/* harmony import */ var _services_categories__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/categories */ \"(app-pages-browser)/./src/services/categories.ts\");\n/* harmony import */ var _services_zones__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/zones */ \"(app-pages-browser)/./src/services/zones.ts\");\n/* harmony import */ var shared_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! shared-types */ \"(app-pages-browser)/../../packages/shared-types/src/index.ts\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n/* __next_internal_client_entry_do_not_use__ useCategories auto */ \n // Import hinzugefügt\n\n\n\n // ZoneDto hinzugefügt\n\n// Helper zum Mappen von DB-Zone zu EnhancedZone\nconst mapToEnhancedZone = (zone)=>({\n        id: zone.id,\n        name: zone.name,\n        zoneKey: zone.zoneKey,\n        minutesRequired: zone.intervalMinutes,\n        pointsGranted: zone.pointsPerInterval,\n        lastActive: '-',\n        totalTimeSpent: 0,\n        totalUsers: 0 // Placeholder\n    });\n// Helper zum Mappen von DB-Kategorie zu EnhancedCategory\nconst mapToEnhancedCategory = (category, guildId, zones)=>({\n        id: category.id,\n        name: category.name,\n        guild_id: guildId,\n        allowedRoles: category.allowedRoles || [],\n        isVisible: category.isVisibleDefault,\n        sendSetup: category.setupFlowEnabled,\n        trackingActive: category.defaultTrackingEnabled,\n        setupTextChannel: category.setupChannelId,\n        waitingRoomName: category.warteraumChannelId,\n        lastActive: '-',\n        totalTimeSpent: 0,\n        totalUsers: 0,\n        discordCategoryId: category.discordCategoryId || null,\n        deletedInDiscord: !category.discordCategoryId,\n        createdAt: new Date(category.createdAt),\n        updatedAt: new Date(category.updatedAt),\n        zones: zones\n    });\nconst useCategories = ()=>{\n    const { currentGuild } = (0,_context_guild_context__WEBPACK_IMPORTED_MODULE_2__.useGuild)();\n    const guildId = (currentGuild === null || currentGuild === void 0 ? void 0 : currentGuild.id) || '';\n    console.log(\"[useCategories] Hook rendered. GuildId: \".concat(guildId));\n    const [categories, setCategories] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [expandedCategories, setExpandedCategories] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [searchQuery, setSearchQuery] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const realtimeChannelRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const loadedGuildIdRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)('');\n    const initialLoadCompleteRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    // --- Memoized Ladefunktion ---\n    const loadCategories = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[loadCategories]\": async (guildIdToLoad)=>{\n            if (!guildIdToLoad) return;\n            if (loading && loadedGuildIdRef.current === guildIdToLoad) return; // Verhindere paralleles Laden für dieselbe Guild\n            console.log(\"[useCategories] loadCategories: Loading for Guild: \".concat(guildIdToLoad));\n            setLoading(true);\n            setError(null);\n            initialLoadCompleteRef.current = false;\n            try {\n                const categoriesData = await _services_categories__WEBPACK_IMPORTED_MODULE_3__.getCategories(shared_types__WEBPACK_IMPORTED_MODULE_5__.ScopeType.GUILD, guildIdToLoad);\n                const enhancedCategoriesPromises = categoriesData.map({\n                    \"useCategories.useCallback[loadCategories].enhancedCategoriesPromises\": async (category)=>{\n                        const zonesData = await _services_zones__WEBPACK_IMPORTED_MODULE_4__.getZonesByCategory(category.id);\n                        const enhancedZones = zonesData.map(mapToEnhancedZone); // Helper verwenden\n                        return mapToEnhancedCategory(category, guildIdToLoad, enhancedZones); // Helper verwenden\n                    }\n                }[\"useCategories.useCallback[loadCategories].enhancedCategoriesPromises\"]);\n                const enhancedCategories = await Promise.all(enhancedCategoriesPromises);\n                setCategories(enhancedCategories);\n                loadedGuildIdRef.current = guildIdToLoad;\n                initialLoadCompleteRef.current = true;\n                console.log(\"[useCategories] loadCategories: \".concat(enhancedCategories.length, \" categories loaded for \").concat(guildIdToLoad));\n            } catch (err) {\n                console.error(\"[useCategories] Error loading categories for \".concat(guildIdToLoad, \":\"), err);\n                setError('Fehler beim Laden der Kategorien');\n                setCategories([]);\n                loadedGuildIdRef.current = guildIdToLoad;\n                initialLoadCompleteRef.current = true;\n            } finally{\n                setLoading(false);\n            }\n        }\n    }[\"useCategories.useCallback[loadCategories]\"], [\n        loading\n    ]); // Abhängig von loading\n    // --- Memoized Realtime Handler ---\n    const handleRealtimeEvent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[handleRealtimeEvent]\": (payload)=>{\n            console.log('[useCategories RAW EVENT]', payload);\n            const { eventType, new: newRecord, old: oldRecord, table, schema } = payload;\n            if (schema !== 'public') return; // Nur auf public Schema reagieren\n            const record = newRecord || oldRecord;\n            if (!record) return;\n            const affectedCategoryId = table === 'categories' ? record.id : record.category_id;\n            if (!affectedCategoryId) return;\n            // Prüfen, ob das Event zur aktuellen Guild gehört (wichtig!)\n            // Wir brauchen einen Weg, die guildId aus dem Payload zu bekommen oder anzunehmen, dass der Filter greift.\n            // Annahme: Filter funktioniert serverseitig, wir reagieren auf alles, was durchkommt.\n            console.log(\"[HANDLER CALLED] Table: \".concat(table, \", Event: \").concat(eventType, \", Affected Category: \").concat(affectedCategoryId));\n            if (table === 'categories') {\n                if (eventType === 'INSERT' && newRecord) {\n                    console.log(\"[Realtime] Category INSERT: \".concat(newRecord.id));\n                    const newCategory = mapToEnhancedCategory(newRecord, guildId, []); // Initial leere Zonen\n                    setCategories({\n                        \"useCategories.useCallback[handleRealtimeEvent]\": (prev)=>{\n                            if (!prev.some({\n                                \"useCategories.useCallback[handleRealtimeEvent]\": (c)=>c.id === newCategory.id\n                            }[\"useCategories.useCallback[handleRealtimeEvent]\"])) {\n                                console.log(\"[Realtime INSERT] Adding new category to state:\", newCategory.name);\n                                return [\n                                    ...prev,\n                                    newCategory\n                                ];\n                            }\n                            console.log(\"[Realtime INSERT] Category already exists, likely race condition, ignoring.\");\n                            return prev; // Verhindere Duplikate\n                        }\n                    }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                    // Lade Zonen im Hintergrund nach\n                    _services_zones__WEBPACK_IMPORTED_MODULE_4__.getZonesByCategory(newRecord.id).then({\n                        \"useCategories.useCallback[handleRealtimeEvent]\": (zonesData)=>{\n                            const enhancedZones = zonesData.map(mapToEnhancedZone);\n                            setCategories({\n                                \"useCategories.useCallback[handleRealtimeEvent]\": (prev)=>prev.map({\n                                        \"useCategories.useCallback[handleRealtimeEvent]\": (c)=>c.id === newRecord.id ? {\n                                                ...c,\n                                                zones: enhancedZones\n                                            } : c\n                                    }[\"useCategories.useCallback[handleRealtimeEvent]\"])\n                            }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                        }\n                    }[\"useCategories.useCallback[handleRealtimeEvent]\"]).catch({\n                        \"useCategories.useCallback[handleRealtimeEvent]\": (err)=>console.error(\"[Realtime] Failed to fetch zones for new category \".concat(newRecord.id), err)\n                    }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                } else if (eventType === 'UPDATE' && newRecord) {\n                    console.log(\"[Realtime] Category UPDATE: \".concat(newRecord.id));\n                    setCategories({\n                        \"useCategories.useCallback[handleRealtimeEvent]\": (prev)=>prev.map({\n                                \"useCategories.useCallback[handleRealtimeEvent]\": (c)=>c.id === newRecord.id ? {\n                                        ...c,\n                                        name: newRecord.name,\n                                        isVisible: newRecord.is_visible_default,\n                                        sendSetup: newRecord.setup_flow_enabled,\n                                        trackingActive: newRecord.default_tracking_enabled,\n                                        setupTextChannel: newRecord.setup_channel_id,\n                                        waitingRoomName: newRecord.warteraum_channel_id,\n                                        discordCategoryId: newRecord.discord_category_id || null,\n                                        deletedInDiscord: !newRecord.discord_category_id,\n                                        updatedAt: new Date(newRecord.updated_at)\n                                    } : c\n                            }[\"useCategories.useCallback[handleRealtimeEvent]\"])\n                    }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                } else if (eventType === 'DELETE' && oldRecord) {\n                    console.log(\"[Realtime] Category DELETE: \".concat(oldRecord.id));\n                    setCategories({\n                        \"useCategories.useCallback[handleRealtimeEvent]\": (prev)=>prev.filter({\n                                \"useCategories.useCallback[handleRealtimeEvent]\": (c)=>c.id !== oldRecord.id\n                            }[\"useCategories.useCallback[handleRealtimeEvent]\"])\n                    }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                }\n            } else if (table === 'zones') {\n                console.log(\"[Realtime] Zone \".concat(eventType, \" for Category \").concat(affectedCategoryId));\n                // Effizienter: Zone direkt im State aktualisieren\n                setCategories({\n                    \"useCategories.useCallback[handleRealtimeEvent]\": (prev)=>{\n                        const categoryIndex = prev.findIndex({\n                            \"useCategories.useCallback[handleRealtimeEvent].categoryIndex\": (c)=>c.id === affectedCategoryId\n                        }[\"useCategories.useCallback[handleRealtimeEvent].categoryIndex\"]);\n                        if (categoryIndex === -1) return prev; // Kategorie nicht im State\n                        const currentCategory = prev[categoryIndex];\n                        let updatedZones = [\n                            ...currentCategory.zones\n                        ]; // Kopie erstellen\n                        if (eventType === 'INSERT' && newRecord) {\n                            const newZone = mapToEnhancedZone(newRecord);\n                            if (!updatedZones.some({\n                                \"useCategories.useCallback[handleRealtimeEvent]\": (z)=>z.id === newZone.id\n                            }[\"useCategories.useCallback[handleRealtimeEvent]\"])) {\n                                updatedZones.push(newZone);\n                            }\n                        } else if (eventType === 'UPDATE' && newRecord) {\n                            const updatedZone = mapToEnhancedZone(newRecord);\n                            updatedZones = updatedZones.map({\n                                \"useCategories.useCallback[handleRealtimeEvent]\": (z)=>z.id === updatedZone.id ? updatedZone : z\n                            }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                        } else if (eventType === 'DELETE' && oldRecord) {\n                            updatedZones = updatedZones.filter({\n                                \"useCategories.useCallback[handleRealtimeEvent]\": (z)=>z.id !== oldRecord.id\n                            }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                        }\n                        const newState = [\n                            ...prev\n                        ];\n                        newState[categoryIndex] = {\n                            ...currentCategory,\n                            zones: updatedZones\n                        };\n                        return newState;\n                    }\n                }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n            } else if (table === 'category_discord_role_permissions') {\n                console.log(\"[Realtime] Roles \".concat(eventType, \" for Category \").concat(affectedCategoryId));\n                ({\n                    \"useCategories.useCallback[handleRealtimeEvent]\": async ()=>{\n                        try {\n                            const categoryData = await _services_categories__WEBPACK_IMPORTED_MODULE_3__.getCategoryById(affectedCategoryId);\n                            if (categoryData) {\n                                setCategories({\n                                    \"useCategories.useCallback[handleRealtimeEvent]\": (prev)=>prev.map({\n                                            \"useCategories.useCallback[handleRealtimeEvent]\": (c)=>c.id === affectedCategoryId ? {\n                                                    ...c,\n                                                    allowedRoles: categoryData.allowedRoles || []\n                                                } : c\n                                        }[\"useCategories.useCallback[handleRealtimeEvent]\"])\n                                }[\"useCategories.useCallback[handleRealtimeEvent]\"]);\n                            }\n                        } catch (error) {\n                            console.error(\"[Realtime] Error refetching roles for category \".concat(affectedCategoryId, \":\"), error);\n                        }\n                    }\n                })[\"useCategories.useCallback[handleRealtimeEvent]\"]();\n            }\n        }\n    }[\"useCategories.useCallback[handleRealtimeEvent]\"], [\n        guildId,\n        setCategories\n    ]); // Abhängigkeiten korrekt setzen\n    // --- Haupt-useEffect für Laden und Subscription ---\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useCategories.useEffect\": ()=>{\n            const currentGuildId = currentGuild === null || currentGuild === void 0 ? void 0 : currentGuild.id;\n            console.log(\"[useCategories Effect] Running for guildId: \".concat(currentGuildId || 'none'));\n            if (!currentGuildId) {\n                console.log('[useCategories Effect] No guildId, resetting.');\n                setCategories([]);\n                loadedGuildIdRef.current = '';\n                initialLoadCompleteRef.current = false;\n                if (realtimeChannelRef.current) {\n                    _lib_supabase__WEBPACK_IMPORTED_MODULE_6__.supabase.removeChannel(realtimeChannelRef.current);\n                    realtimeChannelRef.current = null;\n                }\n                return;\n            }\n            // Laden, wenn die Guild neu ist oder die Daten fehlen\n            if (loadedGuildIdRef.current !== currentGuildId) {\n                loadCategories(currentGuildId);\n            }\n            // Subscription Logik\n            let channel = realtimeChannelRef.current;\n            const channelName = \"categories:\".concat(currentGuildId);\n            if (!channel || channel.topic !== \"realtime:\".concat(channelName)) {\n                if (channel) _lib_supabase__WEBPACK_IMPORTED_MODULE_6__.supabase.removeChannel(channel);\n                console.log(\"[useCategories Effect] Setting up channel: \".concat(channelName));\n                channel = _lib_supabase__WEBPACK_IMPORTED_MODULE_6__.supabase.channel(channelName);\n                channel.on('postgres_changes', {\n                    event: '*',\n                    schema: 'public',\n                    table: 'categories'\n                }, handleRealtimeEvent).on('postgres_changes', {\n                    event: '*',\n                    schema: 'public',\n                    table: 'zones'\n                }, handleRealtimeEvent).on('postgres_changes', {\n                    event: '*',\n                    schema: 'public',\n                    table: 'category_discord_role_permissions'\n                }, handleRealtimeEvent).subscribe({\n                    \"useCategories.useEffect\": (status, err)=>{\n                        console.log(\"[useCategories Effect] Sub status \".concat(channelName, \":\"), status, err || '');\n                        if (status === 'SUBSCRIBED') {\n                            realtimeChannelRef.current = channel;\n                            if (!initialLoadCompleteRef.current) {\n                                console.log('[useCategories Effect] Re-fetching data after successful subscription.');\n                                loadCategories(currentGuildId);\n                            }\n                        } else {\n                            realtimeChannelRef.current = null;\n                        }\n                    }\n                }[\"useCategories.useEffect\"]);\n            } else {\n                console.log(\"[useCategories Effect] Already subscribed to \".concat(channelName));\n            }\n            // Cleanup\n            return(({\n                \"useCategories.useEffect\": ()=>{\n                    console.log(\"[useCategories Effect] Cleanup for guildId: \".concat(currentGuildId));\n                    // WICHTIG: Nur den Channel entfernen, wenn er noch aktuell ist!\n                    // Wenn der Effekt wegen Guild-Wechsel neu läuft, wurde der alte Channel evtl. schon entfernt.\n                    const currentChannel = realtimeChannelRef.current;\n                    if (currentChannel && currentChannel.topic === \"realtime:\".concat(channelName)) {\n                        console.log(\"[useCategories Effect] Removing channel \".concat(currentChannel.topic));\n                        _lib_supabase__WEBPACK_IMPORTED_MODULE_6__.supabase.removeChannel(currentChannel);\n                        realtimeChannelRef.current = null;\n                    }\n                }\n            })[\"useCategories.useEffect\"]);\n        }\n    }[\"useCategories.useEffect\"], [\n        currentGuild === null || currentGuild === void 0 ? void 0 : currentGuild.id,\n        loadCategories,\n        handleRealtimeEvent\n    ]);\n    // --- Restliche Funktionen (angepasst) ---\n    const toggleCategoryExpand = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[toggleCategoryExpand]\": (categoryId)=>{\n            setExpandedCategories({\n                \"useCategories.useCallback[toggleCategoryExpand]\": (prev)=>prev.includes(categoryId) ? prev.filter({\n                        \"useCategories.useCallback[toggleCategoryExpand]\": (id)=>id !== categoryId\n                    }[\"useCategories.useCallback[toggleCategoryExpand]\"]) : [\n                        ...prev,\n                        categoryId\n                    ]\n            }[\"useCategories.useCallback[toggleCategoryExpand]\"]);\n        }\n    }[\"useCategories.useCallback[toggleCategoryExpand]\"], []);\n    const saveCategory = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[saveCategory]\": async (categoryData)=>{\n            if (!guildId) {\n                _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.error('Keine Guild ausgewählt');\n                return false;\n            }\n            setLoading(true);\n            try {\n                if (categoryData.id) {\n                    const updateData = {};\n                    await _services_categories__WEBPACK_IMPORTED_MODULE_3__.updateCategory(categoryData.id, updateData);\n                    _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.success('Kategorie aktualisiert');\n                } else {\n                    const createData = {};\n                    await _services_categories__WEBPACK_IMPORTED_MODULE_3__.createCategory(createData);\n                    _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.success('Kategorie erstellt');\n                }\n                // Realtime sollte State aktualisieren\n                return true;\n            } catch (err) {\n                return false;\n            } finally{\n                setLoading(false);\n            }\n        }\n    }[\"useCategories.useCallback[saveCategory]\"], [\n        guildId\n    ]); // Abhängigkeit von guildId\n    const deleteCategory = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[deleteCategory]\": async (categoryId)=>{\n            setLoading(true);\n            try {\n                const result = await _services_categories__WEBPACK_IMPORTED_MODULE_3__.deleteCategory(categoryId);\n                if (result.success) _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.success('Kategorie gelöscht.');\n                // Realtime sollte State aktualisieren\n                return result;\n            } catch (err) {\n                return {\n                    success: false,\n                    message: 'Fehler'\n                };\n            } finally{\n                setLoading(false);\n            }\n        }\n    }[\"useCategories.useCallback[deleteCategory]\"], []);\n    const refetch = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[refetch]\": ()=>{\n            console.log('[useCategories] refetch triggered');\n            if (currentGuild === null || currentGuild === void 0 ? void 0 : currentGuild.id) {\n                loadedGuildIdRef.current = '';\n                initialLoadCompleteRef.current = false;\n                loadCategories(currentGuild.id);\n            }\n        }\n    }[\"useCategories.useCallback[refetch]\"], [\n        currentGuild === null || currentGuild === void 0 ? void 0 : currentGuild.id,\n        loadCategories\n    ]);\n    const getTotalStats = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useCategories.useCallback[getTotalStats]\": ()=>({\n                totalCategories: categories.length,\n                totalUsers: categories.reduce({\n                    \"useCategories.useCallback[getTotalStats]\": (sum, c)=>sum + c.totalUsers\n                }[\"useCategories.useCallback[getTotalStats]\"], 0),\n                totalTime: categories.reduce({\n                    \"useCategories.useCallback[getTotalStats]\": (sum, c)=>sum + c.totalTimeSpent\n                }[\"useCategories.useCallback[getTotalStats]\"], 0)\n            })\n    }[\"useCategories.useCallback[getTotalStats]\"], [\n        categories\n    ]);\n    return {\n        categories,\n        loading,\n        error,\n        expandedCategories,\n        searchQuery,\n        setSearchQuery,\n        toggleCategoryExpand,\n        saveCategory,\n        deleteCategory,\n        getTotalStats,\n        refetch\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/dashboard/category-management/hooks/useCategories.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/dashboard/category-management/hooks/useZones.ts":
/*!************************************************************************!*\
  !*** ./src/components/dashboard/category-management/hooks/useZones.ts ***!
  \************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useZones: () => (/* binding */ useZones)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.3.0_@babel+core@7.2_be93e11acbbedc130c6eb3d215a0d5e8/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/core/toaster */ \"(app-pages-browser)/./src/components/core/toaster.tsx\");\n/* harmony import */ var _services_zones__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/services/zones */ \"(app-pages-browser)/./src/services/zones.ts\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n/* __next_internal_client_entry_do_not_use__ useZones auto */ \n // Import hinzugefügt\n\n\n// Helper zum Mappen von DB-Zone zu EnhancedZone\nconst mapToEnhancedZone = (zone)=>{\n    var _zone_interval_minutes, _zone_points_per_interval;\n    return {\n        id: zone.id,\n        name: zone.name,\n        zoneKey: zone.zone_key || zone.zoneKey,\n        minutesRequired: (_zone_interval_minutes = zone.interval_minutes) !== null && _zone_interval_minutes !== void 0 ? _zone_interval_minutes : zone.intervalMinutes,\n        pointsGranted: (_zone_points_per_interval = zone.points_per_interval) !== null && _zone_points_per_interval !== void 0 ? _zone_points_per_interval : zone.pointsPerInterval,\n        lastActive: '-',\n        totalTimeSpent: 0,\n        totalUsers: 0 // Placeholder\n    };\n};\nconst useZones = (categoryId)=>{\n    const [zones, setZones] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const realtimeChannelRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const loadedCategoryIdRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)('');\n    const initialLoadCompleteRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    // --- Memoized Ladefunktion ---\n    const loadZones = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useZones.useCallback[loadZones]\": async (categoryIdToLoad)=>{\n            if (!categoryIdToLoad) {\n                console.log('[useZones] loadZones: No category ID.');\n                setZones([]);\n                loadedCategoryIdRef.current = '';\n                initialLoadCompleteRef.current = false;\n                return;\n            }\n            if (loading && loadedCategoryIdRef.current === categoryIdToLoad) {\n                console.log(\"[useZones] loadZones: Already loading for \".concat(categoryIdToLoad, \". Skipping.\"));\n                return;\n            }\n            console.log(\"[useZones] loadZones: Loading zones for category: \".concat(categoryIdToLoad));\n            setLoading(true);\n            setError(null);\n            initialLoadCompleteRef.current = false;\n            try {\n                const zonesData = await _services_zones__WEBPACK_IMPORTED_MODULE_2__.getZonesByCategory(categoryIdToLoad);\n                const enhancedZones = zonesData.map(mapToEnhancedZone);\n                setZones(enhancedZones);\n                loadedCategoryIdRef.current = categoryIdToLoad;\n                initialLoadCompleteRef.current = true;\n                console.log(\"[useZones] loadZones: \".concat(enhancedZones.length, \" zones loaded for \").concat(categoryIdToLoad));\n            } catch (err) {\n                console.error(\"[useZones] Error loading zones for \".concat(categoryIdToLoad, \":\"), err);\n                setError('Fehler beim Laden der Zonen');\n                setZones([]);\n                loadedCategoryIdRef.current = categoryIdToLoad;\n                initialLoadCompleteRef.current = true;\n            } finally{\n                setLoading(false);\n            }\n        }\n    }[\"useZones.useCallback[loadZones]\"], [\n        loading\n    ]);\n    // --- Memoized Realtime Handler ---\n    const handleZoneChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useZones.useCallback[handleZoneChange]\": (payload)=>{\n            console.log('[useZones RAW EVENT zones]', payload); // Raw Event Logging\n            console.log('[HANDLER CALLED] handleZoneChange', payload);\n            const { eventType, new: newRecord, old: oldRecord, table, schema } = payload;\n            if (schema !== 'public' || table !== 'zones') return;\n            // RLS sollte serverseitig filtern, aber zur Sicherheit hier nochmal prüfen\n            const record = newRecord || oldRecord;\n            if (!record || record.category_id !== categoryId) {\n                console.log('[useZones Realtime] Event ignored, wrong category ID or no record.');\n                return;\n            }\n            const zoneId = record.id;\n            if (!zoneId) return;\n            switch(eventType){\n                case 'INSERT':\n                    if (newRecord) {\n                        console.log(\"[Realtime] Zone INSERT: \".concat(newRecord.id));\n                        const enhancedZone = mapToEnhancedZone(newRecord);\n                        setZones({\n                            \"useZones.useCallback[handleZoneChange]\": (prev)=>{\n                                if (!prev.some({\n                                    \"useZones.useCallback[handleZoneChange]\": (z)=>z.id === enhancedZone.id\n                                }[\"useZones.useCallback[handleZoneChange]\"])) {\n                                    return [\n                                        ...prev,\n                                        enhancedZone\n                                    ];\n                                }\n                                return prev;\n                            }\n                        }[\"useZones.useCallback[handleZoneChange]\"]);\n                    }\n                    break;\n                case 'UPDATE':\n                    if (newRecord) {\n                        console.log(\"[Realtime] Zone UPDATE: \".concat(newRecord.id));\n                        const updatedZone = mapToEnhancedZone(newRecord);\n                        setZones({\n                            \"useZones.useCallback[handleZoneChange]\": (prev)=>prev.map({\n                                    \"useZones.useCallback[handleZoneChange]\": (z)=>z.id === updatedZone.id ? updatedZone : z\n                                }[\"useZones.useCallback[handleZoneChange]\"])\n                        }[\"useZones.useCallback[handleZoneChange]\"]);\n                    }\n                    break;\n                case 'DELETE':\n                    if (oldRecord) {\n                        console.log(\"[Realtime] Zone DELETE: \".concat(oldRecord.id));\n                        setZones({\n                            \"useZones.useCallback[handleZoneChange]\": (prev)=>prev.filter({\n                                    \"useZones.useCallback[handleZoneChange]\": (z)=>z.id !== oldRecord.id\n                                }[\"useZones.useCallback[handleZoneChange]\"])\n                        }[\"useZones.useCallback[handleZoneChange]\"]);\n                    }\n                    break;\n                default:\n                    console.log(\"[useZones Realtime] Unhandled event type: \".concat(eventType));\n            }\n        }\n    }[\"useZones.useCallback[handleZoneChange]\"], [\n        categoryId,\n        setZones\n    ]); // Abhängig von categoryId und setZones\n    // --- Haupt-useEffect ---\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useZones.useEffect\": ()=>{\n            console.log(\"[useZones Effect] Running for categoryId: \".concat(categoryId || 'none'));\n            if (!categoryId) {\n                console.log('[useZones Effect] No categoryId, resetting.');\n                setZones([]);\n                loadedCategoryIdRef.current = '';\n                initialLoadCompleteRef.current = false;\n                if (realtimeChannelRef.current) {\n                    _lib_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.removeChannel(realtimeChannelRef.current);\n                    realtimeChannelRef.current = null;\n                }\n                return;\n            }\n            if (loadedCategoryIdRef.current !== categoryId) {\n                loadZones(categoryId);\n            }\n            // Subscription Logic\n            let channel = realtimeChannelRef.current;\n            const channelName = \"zones:\".concat(categoryId);\n            if (!channel || channel.topic !== \"realtime:\".concat(channelName)) {\n                if (channel) _lib_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.removeChannel(channel);\n                console.log(\"[useZones Effect] Setting up channel: \".concat(channelName));\n                channel = _lib_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.channel(channelName);\n                channel.on('postgres_changes', {\n                    event: '*',\n                    schema: 'public',\n                    table: 'zones',\n                    filter: \"category_id=eq.\".concat(categoryId)\n                }, handleZoneChange) // Übergibt den memoized Handler\n                .subscribe({\n                    \"useZones.useEffect\": (status, err)=>{\n                        console.log(\"[useZones Effect] Sub status \".concat(channelName, \":\"), status, err || '');\n                        if (status === 'SUBSCRIBED') {\n                            realtimeChannelRef.current = channel;\n                            if (!initialLoadCompleteRef.current) {\n                                loadZones(categoryId);\n                            }\n                        } else {\n                            realtimeChannelRef.current = null;\n                        }\n                    }\n                }[\"useZones.useEffect\"]);\n            }\n            // Cleanup\n            return ({\n                \"useZones.useEffect\": ()=>{\n                    console.log(\"[useZones Effect] Cleanup for categoryId: \".concat(categoryId));\n                    const currentChannel = realtimeChannelRef.current; // Capture ref in closure\n                    if (currentChannel && currentChannel.topic === \"realtime:\".concat(channelName)) {\n                        console.log(\"[useZones Effect] Removing channel \".concat(currentChannel.topic));\n                        _lib_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.removeChannel(currentChannel);\n                        realtimeChannelRef.current = null;\n                    }\n                }\n            })[\"useZones.useEffect\"];\n        }\n    }[\"useZones.useEffect\"], [\n        categoryId,\n        loadZones,\n        handleZoneChange\n    ]); // Korrekte Abhängigkeiten\n    // --- Restliche Funktionen ---\n    const saveZone = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useZones.useCallback[saveZone]\": async (zoneData)=>{\n            if (!categoryId) {\n                _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.error('Keine Kategorie ID');\n                return false;\n            }\n            setLoading(true);\n            try {\n                const dtoData = {\n                    name: zoneData.name,\n                    zoneKey: zoneData.zoneKey,\n                    pointsPerInterval: zoneData.pointsGranted,\n                    intervalMinutes: zoneData.minutesRequired\n                };\n                if (zoneData.id) {\n                    await _services_zones__WEBPACK_IMPORTED_MODULE_2__.updateZone(zoneData.id, dtoData);\n                    _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.success('Zone aktualisiert.');\n                } else {\n                    await _services_zones__WEBPACK_IMPORTED_MODULE_2__.createZone(categoryId, dtoData);\n                    _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.success('Zone erstellt.');\n                }\n                return true;\n            } catch (err) {\n                var _err_response_data, _err_response;\n                console.error('Fehler beim Speichern der Zone:', err);\n                _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.error(((_err_response = err.response) === null || _err_response === void 0 ? void 0 : (_err_response_data = _err_response.data) === null || _err_response_data === void 0 ? void 0 : _err_response_data.message) || 'Fehler beim Speichern der Zone');\n                return false;\n            } finally{\n                setLoading(false);\n            }\n        }\n    }[\"useZones.useCallback[saveZone]\"], [\n        categoryId\n    ]);\n    const deleteZone = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useZones.useCallback[deleteZone]\": async (zoneId)=>{\n            setLoading(true);\n            try {\n                const result = await _services_zones__WEBPACK_IMPORTED_MODULE_2__.deleteZone(zoneId);\n                if (result.success) _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.success('Zone gelöscht.');\n                else _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.error(result.message || 'Fehler beim Löschen');\n                return result;\n            } catch (err) {\n                var _err_response_data, _err_response;\n                console.error('Fehler beim Löschen der Zone:', err);\n                const message = ((_err_response = err.response) === null || _err_response === void 0 ? void 0 : (_err_response_data = _err_response.data) === null || _err_response_data === void 0 ? void 0 : _err_response_data.message) || 'Fehler beim Löschen der Zone';\n                _components_core_toaster__WEBPACK_IMPORTED_MODULE_1__.toast.error(message);\n                return {\n                    success: false,\n                    message\n                };\n            } finally{\n                setLoading(false);\n            }\n        }\n    }[\"useZones.useCallback[deleteZone]\"], []);\n    const refetch = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useZones.useCallback[refetch]\": ()=>{\n            console.log('[useZones] refetch triggered');\n            if (categoryId) {\n                loadedCategoryIdRef.current = '';\n                initialLoadCompleteRef.current = false;\n                loadZones(categoryId);\n            }\n        }\n    }[\"useZones.useCallback[refetch]\"], [\n        categoryId,\n        loadZones\n    ]);\n    return {\n        zones,\n        loading,\n        error,\n        saveZone,\n        deleteZone,\n        refetch\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/dashboard/category-management/hooks/useZones.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/context/auth-context.tsx":
/*!**************************************!*\
  !*** ./src/context/auth-context.tsx ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: () => (/* binding */ AuthProvider),\n/* harmony export */   useAuth: () => (/* binding */ useAuth)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.3.0_@babel+core@7.2_be93e11acbbedc130c6eb3d215a0d5e8/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.3.0_@babel+core@7.2_be93e11acbbedc130c6eb3d215a0d5e8/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.3.0_@babel+core@7.2_be93e11acbbedc130c6eb3d215a0d5e8/node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n/* __next_internal_client_entry_do_not_use__ useAuth,AuthProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n// Standardwerte\nconst defaultContext = {\n    user: null,\n    availableGuilds: [],\n    token: null,\n    loading: true,\n    isAuthenticated: false,\n    login: ()=>{},\n    logout: async ()=>{},\n    refreshSession: async ()=>{}\n};\n// Erstellen des Kontexts\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(defaultContext);\n// Hook für den Zugriff auf den Kontext\nconst useAuth = ()=>{\n    _s();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n// Provider-Komponente\nfunction AuthProvider(param) {\n    let { children } = param;\n    _s1();\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [internalAvailableGuilds, setInternalAvailableGuilds] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [token, setToken] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [isAuthenticated, setIsAuthenticated] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    const pathname = (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.usePathname)();\n    // --- Stabile Funktionen ---\n    const handleLogout = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"AuthProvider.useCallback[handleLogout]\": async function() {\n            let redirect = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;\n            console.log('handleLogout: Starting logout...');\n            const currentPath =  true ? window.location.pathname : 0; // Check for window\n            setUser(null);\n            setInternalAvailableGuilds([]);\n            setToken(null);\n            setIsAuthenticated(false);\n            setLoading(false); // Stop loading on logout\n            if (true) {\n                const tokenKey = \"chimera_auth_token\" || 0;\n                localStorage.removeItem(tokenKey);\n                localStorage.removeItem('selectedGuildId'); // Korrekter Schlüssel\n            }\n            try {\n                const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.auth.signOut();\n                if (error) console.error('handleLogout: Supabase signOut error:', error);\n                else console.log('handleLogout: Supabase signOut successful.');\n            } catch (error) {\n                console.error('handleLogout: Unexpected signOut error:', error);\n            }\n            if (redirect && !currentPath.startsWith('/auth/login') && \"object\" !== 'undefined') {\n                console.log('handleLogout: Redirecting to /auth/login');\n                router.push('/auth/login'); // Use Next.js router for client-side navigation\n            } else {\n                console.log('handleLogout: No redirect needed or desired.');\n            }\n        }\n    }[\"AuthProvider.useCallback[handleLogout]\"], [\n        router\n    ]); // router ist stabil\n    const fetchBackendSession = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"AuthProvider.useCallback[fetchBackendSession]\": async (supabaseToken)=>{\n            console.log('[AuthContext] fetchBackendSession: Fetching backend session...');\n            // Avoid setting loading true if component unmounted before fetch completes\n            let isMounted = true;\n            setLoading(true);\n            try {\n                var _sessionData_user;\n                const apiUrl = \"http://localhost:3000\" || 0;\n                const response = await fetch(\"\".concat(apiUrl, \"/api/v1/auth/session\"), {\n                    headers: {\n                        Authorization: \"Bearer \".concat(supabaseToken)\n                    }\n                });\n                if (!response.ok) {\n                    const errorText = await response.text().catch({\n                        \"AuthProvider.useCallback[fetchBackendSession]\": ()=>\"Status \".concat(response.status)\n                    }[\"AuthProvider.useCallback[fetchBackendSession]\"]);\n                    console.error(\"[AuthContext] fetchBackendSession: Error \".concat(response.status, \": \").concat(errorText));\n                    if (isMounted) await handleLogout(false); // Nur ausloggen, wenn noch gemounted\n                    return null;\n                }\n                const sessionData = await response.json();\n                console.log('[AuthContext] fetchBackendSession: Success. User:', (_sessionData_user = sessionData.user) === null || _sessionData_user === void 0 ? void 0 : _sessionData_user.username);\n                if (isMounted) {\n                    setToken({\n                        \"AuthProvider.useCallback[fetchBackendSession]\": (prev)=>prev === supabaseToken ? prev : supabaseToken\n                    }[\"AuthProvider.useCallback[fetchBackendSession]\"]);\n                    setUser({\n                        \"AuthProvider.useCallback[fetchBackendSession]\": (prev)=>JSON.stringify(prev) === JSON.stringify(sessionData.user) ? prev : sessionData.user\n                    }[\"AuthProvider.useCallback[fetchBackendSession]\"]);\n                    setInternalAvailableGuilds({\n                        \"AuthProvider.useCallback[fetchBackendSession]\": (prev)=>JSON.stringify(prev) === JSON.stringify(sessionData.availableGuilds) ? prev : sessionData.availableGuilds\n                    }[\"AuthProvider.useCallback[fetchBackendSession]\"]);\n                    setIsAuthenticated(true);\n                    if (true) {\n                        const tokenKey = \"chimera_auth_token\" || 0;\n                        localStorage.setItem(tokenKey, supabaseToken);\n                    }\n                }\n                return sessionData;\n            } catch (error) {\n                console.error('[AuthContext] fetchBackendSession: Unexpected error:', error);\n                if (isMounted) await handleLogout(false);\n                return null;\n            } finally{\n                if (isMounted) setLoading(false);\n            }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }\n    }[\"AuthProvider.useCallback[fetchBackendSession]\"], [\n        handleLogout\n    ]); // handleLogout ist stabil\n    // --- Auth State Listener ---\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AuthProvider.useEffect\": ()=>{\n            let isMounted = true; // Flag to prevent state updates on unmounted component\n            console.log('[AuthContext] Setting up onAuthStateChange listener');\n            setLoading(true);\n            const { data: authListener } = _lib_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.auth.onAuthStateChange({\n                \"AuthProvider.useEffect\": async (event, session)=>{\n                    if (!isMounted) return; // Don't run if component is unmounted\n                    console.log('[AuthContext] Event:', event, 'Session present:', !!session);\n                    if (event === 'INITIAL_SESSION' || event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {\n                        if (session === null || session === void 0 ? void 0 : session.access_token) {\n                            await fetchBackendSession(session.access_token);\n                        } else {\n                            if (isAuthenticated) {\n                                console.log('[AuthContext] Auth event with session but no token, logging out.');\n                                await handleLogout(false);\n                            } else {\n                                setLoading(false);\n                            }\n                        }\n                    } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n                        console.log(\"[AuthContext] \".concat(event, \" event received, logging out.\"));\n                        await handleLogout(true); // Logout with redirect\n                    }\n                // setLoading is handled within fetchBackendSession/handleLogout\n                }\n            }[\"AuthProvider.useEffect\"]);\n            return ({\n                \"AuthProvider.useEffect\": ()=>{\n                    var _authListener_subscription;\n                    isMounted = false; // Set flag on unmount\n                    console.log('[AuthContext] Removing onAuthStateChange listener');\n                    authListener === null || authListener === void 0 ? void 0 : (_authListener_subscription = authListener.subscription) === null || _authListener_subscription === void 0 ? void 0 : _authListener_subscription.unsubscribe();\n                }\n            })[\"AuthProvider.useEffect\"];\n        }\n    }[\"AuthProvider.useEffect\"], [\n        fetchBackendSession,\n        handleLogout,\n        isAuthenticated\n    ]); // isAuthenticated added\n    // --- Other Functions ---\n    const login = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"AuthProvider.useCallback[login]\": async ()=>{\n            console.log('Login: Starting Supabase Discord OAuth Flow...');\n            if (true) {\n                localStorage.removeItem(\"chimera_auth_token\" || 0);\n                localStorage.removeItem('selectedGuildId');\n            }\n            const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.auth.signInWithOAuth({\n                provider: 'discord',\n                options: {\n                    redirectTo: \"\".concat(window.location.protocol, \"//\").concat(window.location.host, \"/auth/callback\"),\n                    scopes: 'identify guilds'\n                }\n            });\n            if (error) console.error('Login Error:', error);\n        }\n    }[\"AuthProvider.useCallback[login]\"], []);\n    const refreshSession = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"AuthProvider.useCallback[refreshSession]\": async ()=>{\n            console.log('[AuthContext] refreshSession called...');\n            const { data: { session } } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.auth.getSession();\n            if (session === null || session === void 0 ? void 0 : session.access_token) {\n                await fetchBackendSession(session.access_token);\n            } else {\n                console.warn('[AuthContext] refreshSession: No valid Supabase session found.');\n                await handleLogout(true);\n            }\n        }\n    }[\"AuthProvider.useCallback[refreshSession]\"], [\n        fetchBackendSession,\n        handleLogout\n    ]);\n    // --- Redirect Effect ---\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AuthProvider.useEffect\": ()=>{\n            console.log(\"[AuthContext Redirect Check] loading: \".concat(loading, \", isAuthenticated: \").concat(isAuthenticated, \", pathname: \").concat(pathname));\n            if (!loading && isAuthenticated && !pathname.startsWith('/dashboard') && !pathname.startsWith('/auth/callback')) {\n                console.log('[AuthContext Redirect Action] Redirecting to /dashboard...');\n                router.replace('/dashboard');\n            }\n        }\n    }[\"AuthProvider.useEffect\"], [\n        loading,\n        isAuthenticated,\n        pathname,\n        router\n    ]);\n    // --- Memoized Context Value ---\n    const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"AuthProvider.useMemo[contextValue]\": ()=>{\n            console.log('[AuthContext] Recalculating context value.');\n            return {\n                user,\n                availableGuilds: internalAvailableGuilds,\n                token,\n                loading,\n                isAuthenticated,\n                login,\n                logout: handleLogout,\n                refreshSession\n            };\n        }\n    }[\"AuthProvider.useMemo[contextValue]\"], [\n        user,\n        internalAvailableGuilds,\n        token,\n        loading,\n        isAuthenticated,\n        login,\n        handleLogout,\n        refreshSession\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\info\\\\Documents\\\\Discord Bot\\\\Chimera\\\\apps\\\\frontend\\\\src\\\\context\\\\auth-context.tsx\",\n        lineNumber: 216,\n        columnNumber: 5\n    }, this);\n}\n_s1(AuthProvider, \"BJfqnzkHIjEi+EqcinsMt+uiSy4=\", false, function() {\n    return [\n        next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter,\n        next_navigation__WEBPACK_IMPORTED_MODULE_2__.usePathname\n    ];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/context/auth-context.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/context/guild-context.tsx":
/*!***************************************!*\
  !*** ./src/context/guild-context.tsx ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GuildProvider: () => (/* binding */ GuildProvider),\n/* harmony export */   useGuild: () => (/* binding */ useGuild)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.3.0_@babel+core@7.2_be93e11acbbedc130c6eb3d215a0d5e8/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/.pnpm/next@15.3.0_@babel+core@7.2_be93e11acbbedc130c6eb3d215a0d5e8/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _auth_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./auth-context */ \"(app-pages-browser)/./src/context/auth-context.tsx\");\n/* __next_internal_client_entry_do_not_use__ useGuild,GuildProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nconst defaultContext = {\n    availableGuilds: [],\n    currentGuild: null,\n    setCurrentGuild: ()=>{},\n    loading: true\n};\nconst GuildContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(defaultContext);\nconst useGuild = ()=>{\n    _s();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(GuildContext);\n};\n_s(useGuild, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction GuildProvider(param) {\n    let { children } = param;\n    _s1();\n    const { availableGuilds, loading: authLoading, isAuthenticated } = (0,_auth_context__WEBPACK_IMPORTED_MODULE_2__.useAuth)(); // availableGuilds ist jetzt stabil\n    const [selectedGuild, setSelectedGuild] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Funktion zum Setzen der Guild - stabilisiert\n    const setCurrentGuildMemoized = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"GuildProvider.useCallback[setCurrentGuildMemoized]\": (guildId)=>{\n            console.log(\"[GuildContext] setCurrentGuild called with ID: \".concat(guildId));\n            const foundGuild = guildId ? availableGuilds.find({\n                \"GuildProvider.useCallback[setCurrentGuildMemoized]\": (g)=>g.id === guildId\n            }[\"GuildProvider.useCallback[setCurrentGuildMemoized]\"]) : null;\n            setSelectedGuild({\n                \"GuildProvider.useCallback[setCurrentGuildMemoized]\": (prevSelected)=>{\n                    if ((prevSelected === null || prevSelected === void 0 ? void 0 : prevSelected.id) === (foundGuild === null || foundGuild === void 0 ? void 0 : foundGuild.id)) {\n                        console.log(\"[GuildContext] Guild \".concat(guildId, \" is already selected.\"));\n                        return prevSelected; // Keine Änderung, Referenz behalten\n                    }\n                    if (guildId && !foundGuild) {\n                        console.error(\"[GuildContext] Attempted to set non-available guild: \".concat(guildId));\n                        // Nicht ändern, wenn nicht gefunden\n                        return prevSelected;\n                    }\n                    if (foundGuild) {\n                        localStorage.setItem('selectedGuildId', foundGuild.id);\n                        console.log(\"[GuildContext] Guild set to: \".concat(foundGuild.name));\n                        return foundGuild;\n                    } else {\n                        localStorage.removeItem('selectedGuildId');\n                        console.log('[GuildContext] Guild selection cleared.');\n                        return null;\n                    }\n                }\n            }[\"GuildProvider.useCallback[setCurrentGuildMemoized]\"]);\n        }\n    }[\"GuildProvider.useCallback[setCurrentGuildMemoized]\"], [\n        availableGuilds\n    ]); // Abhängig von den verfügbaren Guilds\n    // Effekt zur Initialisierung/Wiederherstellung der Auswahl\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"GuildProvider.useEffect\": ()=>{\n            console.log('[GuildContext Initial Effect] Running. AuthLoading:', authLoading, 'IsAuth:', isAuthenticated);\n            if (!authLoading && isAuthenticated) {\n                const guildsToUse = availableGuilds || [];\n                console.log('[GuildContext Initial Effect] Guilds available:', guildsToUse.length);\n                if (guildsToUse.length === 0) {\n                    if (selectedGuild !== null) {\n                        console.log('[GuildContext Initial Effect] No guilds available, resetting selection.');\n                        setCurrentGuildMemoized(null); // Zustand über die Funktion aktualisieren\n                    }\n                    return;\n                }\n                const storedGuildId = localStorage.getItem('selectedGuildId');\n                let guildToSelect = null;\n                if (storedGuildId) {\n                    guildToSelect = guildsToUse.find({\n                        \"GuildProvider.useEffect\": (g)=>g.id === storedGuildId\n                    }[\"GuildProvider.useEffect\"]);\n                    if (!guildToSelect) {\n                        console.warn(\"[GuildContext Initial Effect] Stored guildId \".concat(storedGuildId, \" not found in available guilds.\"));\n                        localStorage.removeItem('selectedGuildId');\n                    }\n                }\n                if (!guildToSelect && guildsToUse.length > 0) {\n                    guildToSelect = guildsToUse[0];\n                    console.log('[GuildContext Initial Effect] Selecting first available guild:', guildToSelect.name);\n                    // Nur setzen, wenn nicht bereits ausgewählt\n                    if ((selectedGuild === null || selectedGuild === void 0 ? void 0 : selectedGuild.id) !== guildToSelect.id) {\n                        setCurrentGuildMemoized(guildToSelect.id);\n                    }\n                } else if (guildToSelect && (selectedGuild === null || selectedGuild === void 0 ? void 0 : selectedGuild.id) !== guildToSelect.id) {\n                    console.log(\"[GuildContext Initial Effect] Setting selected guild to stored: \".concat(guildToSelect.name));\n                    setCurrentGuildMemoized(guildToSelect.id);\n                } else if (!guildToSelect && selectedGuild !== null) {\n                    console.log('[GuildContext Initial Effect] No valid initial guild, resetting.');\n                    setCurrentGuildMemoized(null);\n                }\n            } else if (!authLoading && !isAuthenticated) {\n                if (selectedGuild !== null) {\n                    console.log('[GuildContext Initial Effect] Not authenticated, resetting selection.');\n                    setCurrentGuildMemoized(null);\n                }\n            }\n        }\n    }[\"GuildProvider.useEffect\"], [\n        authLoading,\n        isAuthenticated,\n        availableGuilds,\n        setCurrentGuildMemoized,\n        selectedGuild\n    ]); // selectedGuild hinzugefügt\n    // Memoisierten Kontextwert erstellen\n    const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"GuildProvider.useMemo[contextValue]\": ()=>{\n            console.log('[GuildContext] Recalculating context value.');\n            return {\n                currentGuild: selectedGuild,\n                availableGuilds: availableGuilds || [],\n                setCurrentGuild: setCurrentGuildMemoized,\n                loading: authLoading\n            };\n        }\n    }[\"GuildProvider.useMemo[contextValue]\"], [\n        selectedGuild,\n        availableGuilds,\n        setCurrentGuildMemoized,\n        authLoading\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(GuildContext.Provider, {\n        value: contextValue,\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\info\\\\Documents\\\\Discord Bot\\\\Chimera\\\\apps\\\\frontend\\\\src\\\\context\\\\guild-context.tsx\",\n        lineNumber: 120,\n        columnNumber: 5\n    }, this);\n}\n_s1(GuildProvider, \"OsRabFJIJysx/9OQg5vtTa0FrK8=\", false, function() {\n    return [\n        _auth_context__WEBPACK_IMPORTED_MODULE_2__.useAuth\n    ];\n});\n_c = GuildProvider;\nvar _c;\n$RefreshReg$(_c, \"GuildProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/context/guild-context.tsx\n"));

/***/ })

});