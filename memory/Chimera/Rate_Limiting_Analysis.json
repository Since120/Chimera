{
  "type": "code_pattern",
  "importance": "high",
  "content": "Das Dokument beschreibt eine Lösung für das Rate Limit Handling und Debouncing bei Kanalnamen-Änderungen in Project Chimera. Die Herausforderung besteht darin, dass die Discord API nur zwei Änderungen pro Kanal alle 10 Minuten erlaubt, während Benutzer im Dashboard schnell hintereinander Änderungen vornehmen können. Die gewählte Lösung kombiniert BullMQ (für robuste Job-Queues), Redis Hash (für Speicherung des letzten gewünschten Namens), @upstash/ratelimit (für initiale Rate-Limit-Checks) und direkte Discord API Calls via axios. Die Implementierung umfasst ein Queue Module, das die BullMQ-Verbindung konfiguriert, einen Job Processor, der die Namensänderungen verarbeitet, und die Integration in die Services, die Namensänderungen auslösen. Der Prozess funktioniert so: 1) Der Service speichert den neuesten Namen im Redis Hash und fügt einen Job zur Queue hinzu (falls noch keiner existiert), 2) Der Job Processor liest den aktuellsten Namen aus Redis, führt einen initialen Rate-Limit-Check durch, ruft die Discord API auf und entfernt bei Erfolg den Eintrag aus Redis. Bei Rate-Limit-Fehlern wird der Job gemäß einer exponentiellen Backoff-Strategie neu eingeplant. Die Lösung ist robust gegenüber Anwendungsneustarts, stellt sicher, dass nur die letzte Änderung ausgeführt wird, und hält das Discord Rate Limit ein.",
  "tags": ["Rate Limiting", "Debouncing", "Discord API", "BullMQ", "Redis", "Queue", "Backoff", "Job Processor", "Upstash", "Nest.js", "Axios", "Channel Rename"],
  "metadata": {
    "source": "RATE LIMITING.md",
    "created": "2023-11-15"
  }
}